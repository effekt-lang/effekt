package effekt
package util

import kiama.util.Messaging.Messages
import kiama.util.{ Message, Messaging, Positions, Position, Severities }

class ColoredMessaging(positions: Positions) extends Messaging(positions) {

  import Severities._

  def severityToWord(severity: Severity): String =
    severity match {
      case Error       => s"${Console.RED}error${Console.RESET}"
      case Warning     => s"${Console.YELLOW}warning${Console.RESET}"
      case Information => s"${Console.WHITE}info${Console.RESET}"
      case Hint        => "hint"
    }

  override def formatMessage(message: Message): String =
    (start(message), finish(message)) match {
      case (Some(from), Some(to)) if from.line == to.line => formatMessage(message, from, to)
      case (Some(from), _) => formatMessage(message, from)
      case (None, _) =>
        val severity = severityToWord(message.severity)
        s"[$severity] ${homogenizePath(message.label)}\n"
    }

  def formatMessage(message: Message, from: Position): String = {
    val severity = severityToWord(message.severity)
    val context = util.Highlight(from.optContext.getOrElse(""))
    s"[$severity] ${from.format} ${homogenizePath(message.label)}\n$context\n"
  }

  def formatMessage(message: Message, from: Position, to: Position): String = {
    val severity = severityToWord(message.severity)
    val context = util.Highlight(from.source.optLineContents(from.line).map { src =>
      src + "\n" + (" " * (from.column - 1)) + ("^" * (to.column - from.column))
    }.getOrElse(""))
    s"[$severity] ${from.format} ${homogenizePath(message.label)}\n$context\n"
  }

  /**
   * To allow uniform testing on all platforms, we homogenize the paths to Unix-style.
   *
   * This way the negative tests look the same on Windows and Linux
   */
  private def homogenizePath(label: String): String =
    label.replace('\\', '/')

  // Filter out duplicates
  // TODO this is a hack and should be solved in typer, where the messages are generated by unification
  override def formatMessages(messages: Messages): String =
    messages.sorted.map(formatMessage).distinct.mkString("")

}
