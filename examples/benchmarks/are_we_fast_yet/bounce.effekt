import examples/benchmarks/runner

import ref
import array

interface Ball {
  def bounce(): Bool
}

interface Random {
  def next(): Int
}

def randomBall { rand: Random }: Ball at {global} = {
  val x = ref(toDouble(rand.next().mod(500)));
  val y = ref(toDouble(rand.next().mod(500)));
  val xVel = ref(toDouble(rand.next().mod(300) - 150));
  val yVel = ref(toDouble(rand.next().mod(300) - 150));
  new Ball {
    def bounce() = {
      val xLimit = 500.0;
      val yLimit = 500.0;
      var bounced = false;
      x.set(x.get + xVel.get);
      y.set(y.get + yVel.get);

      if (x.get > xLimit) {
        x.set(xLimit);
        xVel.set(neg(abs(xVel.get)));
        bounced = true;
      }
      if (x.get < 0.0) {
        x.set(0.0);
        xVel.set(abs(xVel.get))
        bounced = true;
      }
      if (y.get > yLimit) {
        y.set(yLimit);
        yVel.set(neg(abs(yVel.get)));
        bounced = true;
      }
      if (y.get < 0.0) {
        y.set(0.0);
        yVel.set(abs(yVel.get));
        bounced = true;
      }

      bounced
    }
  }
}

def withRandom[R] { program: { Random } => R }: R = {
  var seed = 74755;
  def rand = new Random {
    def next() = {
      seed = bitwiseAnd((seed * 1309) + 13849, 65535);
      seed
    }
  }
  program {rand}
}

def run(n: Int) = {
  withRandom { {rand: Random} =>
    val ballCount = 100;
    var bounces = 0;
    val balls = array::build(ballCount) { _ => randomBall(){rand} }

    each(0, n) { i =>
      each(0, ballCount) { i =>
        val ball = balls.unsafeGet(i);
        val didBounce = ball.bounce();
        if (didBounce)
          bounces = bounces + 1;
      }
    }

    bounces
  }
}

def main() = benchmark(50){run}
