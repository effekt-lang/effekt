import examples/benchmarks/runner

import ref
import array

type Tree {
  Leaf(arr: Array[Int])
  Node(i0: Tree, i1: Tree, i2: Tree, i3: Tree)
}

interface Random {
  def next(): Int
}

def bitAnd(x: Int, y: Int) = mod(x, y + 1)

def withRandom[R]{ program: { Random } => R }: R = {
  var seed = 74755;
  def rand = new Random {
    def next() = {
      seed = bitAnd((seed * 1309) + 13849, 65535);
      seed;
    }
  }
  program{rand}
}

def run(n: Int) = {
  val count = ref(0);

  def buildTreeDepth(depth: Int) { rand: Random }: Tree = {
    count.set(count.get + 1);
    if (depth == 1) {
      Leaf(allocate(mod(rand.next, 10) + 1))
    } else {
      Node(
        buildTreeDepth(depth - 1){ rand },
        buildTreeDepth(depth - 1){ rand },
        buildTreeDepth(depth - 1){ rand },
        buildTreeDepth(depth - 1){ rand })
    }
  }

  each(0, n) { _ =>
    withRandom { { rand: Random } => buildTreeDepth(7) {rand}; () }
  }

  count.get
}

def main() = benchmark(1){run}
