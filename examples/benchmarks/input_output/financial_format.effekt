import examples/benchmarks/runner

import bytearray
import char
import io/error
import io/filesystem
import stream


def emitEntry(tag: Int) { value: () => Unit / emit[Byte] }: Unit / emit[Byte] = {
  tag.show.fromString.each()
  do emit(61.toByte)
  value()
  do emit(01.toByte)
}

def emitOrder(): Unit / emit[Byte] = {
  emitEntry(8) { "FIX.4.4".fromString.each() }
  emitEntry(9) { "176".fromString.each() }
  emitEntry(35) { "D".fromString.each() }
  emitEntry(49) { "Sender".fromString.each() }
  emitEntry(56) { "Target".fromString.each() }
  emitEntry(34) { "123".fromString.each() }
  emitEntry(52) { "20250124-16:00:00.000".fromString.each() }

  emitEntry(11) { "12345".fromString.each() }
  emitEntry(55) { "AAPL".fromString.each() }
  emitEntry(54) { "1".fromString.each() }
  emitEntry(38) { "100".fromString.each() }
  emitEntry(40) { "2".fromString.each() }
  emitEntry(44) { "150.00".fromString.each() }

  emitEntry(10) { "123".fromString.each() }
}

def readTag(): Int / read[Byte] = {
  var tag = 0
  exhaustively {
    val byte = do read[Byte]().toInt
    if (byte >= 48 && byte <= 57) {
      tag = tag * 10 + (byte - 48)
    } else {
      do stop()
    }
  }
  return tag
}

def readEntry { entry: Int => Unit / read[Byte] }: Unit / read[Byte] = {
  val tag = readTag()
  try {
    entry(tag)
  } with read[Byte] {
    resume {
      val byte = do read[Byte]()
      if (byte.toInt == 1) {
        do stop()
      } else {
        byte
      }
    }
  }
}

def readOrder(): Unit / read[Byte] = {
  def assertTag(tag: Int) = {
    readEntry { got =>
      if (got == tag) {
        exhaustively { do read[Byte](); () }
      } else {
        panic("wrong tag")
      }
    }
  }
  assertTag(8)
  assertTag(9)
  assertTag(35)
  assertTag(49)
  assertTag(56)
  assertTag(34)
  assertTag(52)

  assertTag(11)
  assertTag(55)
  assertTag(54)
  assertTag(38)
  assertTag(40)
  assertTag(44)

  assertTag(10)
}


def run(n: Int) = {
  with on[IOError].panic;

  val filename = "/tmp/financial_information_exchange.txt"
  val size = 4096

  writeFile(filename) {
    repeat(n) {
      emitOrder()
    }
  }

  readFile(filename) {
    repeat(n) {
      readOrder()
    }
  }

  return 0
  
}

def main() = benchmark(5){run}

