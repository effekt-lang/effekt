import examples/benchmarks/runner

import bytearray
import list
import io
import io/error
import io/filesystem


def run(n: Int) = {
  with on[IOError].panic;

  val foldername = "/tmp/interleave_promises/"
  val size = 4096

  on[IOError].result { mkdir(foldername) } match {
    case Error(EEXIST(), msg) => ()
    case Error(e, m) => do raise(e, m)
    case Success(()) => ()
  }

  val promises = list::build(n) { i =>
    promise(box {
      with on[IOError].result
      val filename = foldername ++ i.show ++ ".txt"
      val file = openForWriting(filename)
      val buffer = bytearray(size, 35.toByte)
      repeat(n) {
        val m = write(file, buffer, 0, size, -1)
        if (m < buffer.size) {
          panic("failed write")
        }
      }
      close(file)
    })
  }

  promises.foreachIndex { (i, p) =>
    p.await().value()
    val filename = foldername ++ i.show ++ ".txt"
    val file = openForReading(filename)
    val buffer = bytearray::allocate(size)
    repeat(n) {
      val m = read(file, buffer, 0, size, -1)
      if (m < buffer.size) {
        panic("failed read")
      }
    }
    close(file)
  }

  return 0
}

def main() = benchmark(5){run}

