import examples/benchmarks/runner

import io/error
import io/filesystem
import stream

record Output(chars: Int, words: Int, lines: Int)

def formatWith(output: Output, filename: String): String =
  output.lines.show ++ " " ++ output.words.show ++ " " ++ output.chars.show ++ " " ++ filename

def isSpace(b: Byte) = b.toInt match {
  case 32 => true // ' '
  case 9  => true // '\t'
  case 10 => true // '\n'
  case 11 => true // '\v'
  case 12 => true // '\f'
  case 13 => true // '\r'
  case _ => false
}

def isNewline(b: Byte) = b.toInt == 10 // \n

def countWords(): Output / read[Byte] = {

  var chars = 0
  var words = 0
  var lines = 0
  var wasSpace = true

  exhaustively {
    val c = do read[Byte]()

    chars = chars + 1

    val currentIsSpace = isSpace(c)

    if (wasSpace && not(currentIsSpace)) {
      words = words + 1
    }
    wasSpace = currentIsSpace

    if (isNewline(c)) {
      lines = lines + 1
    }
  }

  Output(chars, words, lines)
}

def run(n: Int) = {
  with on[IOError].panic;

  val filename = "/tmp/word_count_ascii.txt"

  val _ = {
    with writeFile(filename)
    with repeat(n)
    for[Int] { range(32, 127) } { c =>
      repeat(10) {
        do emit(c.toByte)
      }
      do emit(10.toByte)
    }
  }

  val output = {
    with readFile(filename)
    countWords()
  }

  return output.chars + output.words + output.lines
}

def main() = benchmark(5){run}

