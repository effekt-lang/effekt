import examples/benchmarks/runner

import io/error
import io/filesystem
import stream

record Output(chars: Int, words: Int, lines: Int)

def formatWith(output: Output, filename: String): String =
  output.lines.show ++ " " ++ output.words.show ++ " " ++ output.chars.show ++ " " ++ filename

def isSpace(c: Char) =
  c == ' ' || c.toInt == 9 || c.toInt == 10 || c.toInt == 11 || c.toInt == 12 || c.toInt == 13
  // \n \r \t \v \f

def isNewline(c: Char) = c.toInt == 10 // \n

def countWords(): Output / read[Char] = {

  var chars = 0
  var words = 0
  var lines = 0
  var wasSpace = true

  exhaustively[Char] { do read() } { c =>

    chars = chars + 1

    val currentIsSpace = isSpace(c)

    if (wasSpace && not(currentIsSpace)) {
      words = words + 1
    }
    wasSpace = currentIsSpace

    if (isNewline(c)) {
      lines = lines + 1
    }
  }

  Output(chars, words, lines)
}

def run(n: Int) = {
  with on[IOError].panic;

  val filename = "/tmp/word_count_utf8.txt"

  val _ = {
    with writeFile(filename)
    with encodeUTF8
    with repeat(n)
    for[Int] { range(128512, 128522) } { c =>
      repeat(10) {
        do emit(c.toChar)
      }
      do emit(10.toChar)
    }
  }

  val output = {
    with readFile(filename)
    with decodeUTF8
    countWords()
  }

  return output.chars + output.words + output.lines
}

def main() = benchmark(5){run}

