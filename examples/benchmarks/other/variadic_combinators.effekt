import examples/benchmarks/runner

// TODO: map uses `var` and therefore fails in ML with "Effect polymorphic recursion is not allowed."
def vfix(lst: List[List[=> (Int => Int at {}) at {}] => (Int => Int at {}) at {}]): List[=> (Int => Int at {}) at {}] = {
  lst.map { el => box { () => el(vfix(lst)) } }
}

// TODO: first/second/third could be replaced with standard library functions
//     (once they are commonly available in all backends)

def first(lst: List[=> (Int => Int at {}) at {}]) = lst match {
  case Cons(a, _) => a
  case _ => box { () => box { (x: Int) => x } }
}

def second(lst: List[=> (Int => Int at {}) at {}]) = lst match {
  case Cons(_, Cons(b, _)) => b
  case _ => box { () => box { (x: Int) => x } }
}

def third(lst: List[=> (Int => Int at {}) at {}]) = lst match {
  case Cons(_, Cons(_, Cons(c, _))) => c
  case _ => box { () => box { (x: Int) => x } }
}

def f1(fs: List[=> (Int => Int at {}) at {}]) =
  box { (n: Int) =>
    if (n == 0) 0
    else second(fs)()(n - 1)
  }

def f2(fs: List[=> (Int => Int at {}) at {}]) =
  box { (n: Int) =>
    if (n == 0) 1
    else third(fs)()(n - 1)
  }

def f3(fs: List[=> (Int => Int at {}) at {}]) =
  box { (n: Int) =>
    if (n == 0) 2
    else first(fs)()(n - 1)
  }

def mod3(x: Int): Int = first(vfix([box f1, box f2, box f3]))()(x)

def run(n: Int) = {
  mod3(n) + mod3(n + 1) + mod3(n + 2)
}

def main() = benchmark(999){run}

