Tuple3(Token(Ident(), foo, Position(0, 0, 0)), Token(Ident(), foo, Position(0, 0, 0)), Token(Ident(), foo, Position(0, 0, 0)))
()
Tuple3(Token(Ident(), foo, Position(1, 1, 0)), Token(Punct(), (, Position(1, 4, 3)), Token(Punct(), ), Position(1, 5, 4)))
()
Tuple3(Token(Ident(), foo, Position(1, 1, 0)), Token(Punct(), (, Position(1, 5, 4)), Token(Punct(), ), Position(2, 2, 11)))
()
ParseSuccess(1)
ParseSuccess(2)
ParseSuccess(3)
ParseSuccess(5)
ParseSuccess(6)
ParseSuccess(6)
ParseFailure(Expected ( but got })
ParseSuccess(Lit(42))
ParseSuccess(Let(x, Lit(4), Lit(42)))
ParseSuccess(Let(x, Let(y, Lit(2), Lit(1)), Lit(42)))
ParseSuccess(Let(x, Let(y, Lit(2), Lit(1)), Lit(42)))
ParseSuccess(Let(x, Let(y, App(f, Lit(42)), Lit(1)), Lit(42)))
ParseSuccess(Let(x, Let(y, App(f, Let(z, Lit(1), Var(z))), Lit(1)), Lit(42)))
()
-----
[1,
2, 3,
4, ]
----------
[1, 2, 3,
4, 5, 6,
7, 8, 9,
1, 2, 3,
4, ]
----------
let x =
  let y =
    2
  in 1
in 42
------------------------------
def foo(x: Int, y: String)
--------------------
def foo(
  x: Int,
  y: String
)
----------
def foo(x: Int, y: String) { var z = 42; }
def foo(
  x: Int,
  y: String
) {
  var z = 42;
}
------
Hi
you!!!
---------------
this
         takes
         four
lines
--------------
this takes
         many
         f l
--------------
this
will
         take
         many
lines
()
CLet(x, CLet(x1, CRet(CLit(42)), CLet(x2, CApp(g, CVar(x1)), CApp(f, CVar(x2)))), CRet(CVar(x)))
let x = let x1 = return 42 in let x2 =
      g(x1)
    in f(x2) in return x
----
return 42
----
let x = return 4 in return 42
----
let x = let y = return 2 in return 1 in
  return 42
----
let x = let y = return 2 in return 1 in
  return 42
----
let x = let y = let x1 = return 42 in f(
        x1
      ) in return 1 in return 42
()
