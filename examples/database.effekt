import immutable/list

interface DataBase[R] {
    //will save name to database
    def addEntry(entry: R): Unit

    //returns list of currently saved names
    def getEntries(): List[R]

    //prints all names to console
    def printEntries(): Unit
}

record Student(
    firstName: String,
    lastName: String,
    id: Int
)



def myApplication(){ db: DataBase[Student] } = {
    var currentId = 0;
    def nextId():Int = {
        val c = currentId;
        currentId = currentId +1;
        return c;
    }
    def newStudent(firstName: String, lastName: String): Student = {
        Student(firstName, lastName, nextId());
    }

    db.addEntry(newStudent("Max","Marschall"));
    db.addEntry(newStudent("Peter","Lustig"));
    db.addEntry(newStudent("Pierre","Drole"));
    db.addEntry(newStudent("Airan","SayÃ¼t"));

    db.printEntries[Student]()
    println("db current state:")
    println(db.getEntries[Student]())
}

def main() = {

    //create database instance
    var names: List[Student] = [];
    var idCounter = 0;
    def firebase = new DataBase[Student] {
        def addEntry(entry: Student) = {
            names = Cons[Student](entry, names)
        }
        
        def getEntries() = {
            return names;
        }
         
        def printEntries() = {
            names.foreach(){ name => println(name); ()}
        }
    };

    //run application
    myApplication(){ firebase }
}