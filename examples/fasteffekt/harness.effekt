module examples/fasteffekt/harness


import examples/fasteffekt/permute
import examples/fasteffekt/list
import io/args
import text/string

def printList(strings: List[String]): Unit = {
    var myString = "";
    foreach[String](strings){ 
        s => 
        myString = infixConcat(myString, s); ();
    };
    println(myString);
}

def printResult(runTimeMicros: Int) = {
    val timeS: String = show[Int](runTimeMicros);
    printList(["Permute: iterations=1 runtime: ", timeS, " us"]);
}

def reportBenchmark(iterations: Int, runTimeMicros: Int) = {
    printList([
        "permute: iterations=",
        show(iterations),
        " average: ",
        show(toDouble(runTimeMicros) / toDouble(iterations)),
        " us total: ",
        show(runTimeMicros),
        " us"]);
}


//@pure
def measureMikros(innerIterations: Int){benchmark: Int=>Unit}: Int = {
    val startTime : Int = currentTimeNanos();
    benchmark(innerIterations);
    val diff = currentTimeNanos() - startTime;
    val runTime = diff/1000;

    return runTime
  }

def doRuns(innerIterations: Int, iterations: Int){benchmark: Int=>Unit} = {
    var totalRunTime = 0;
    each(0, iterations) {
        i => 
        val runTime = measureMikros(innerIterations){ benchmark }
        printResult(runTime);
        totalRunTime = totalRunTime + runTime;
        ();
    }
    reportBenchmark(iterations, totalRunTime)
}

def doBenchmark(name: String, inner: Int, iterations: Int) = {
    if (name == "Permute") {
        doRuns(inner, iterations){Permute}
    } else if (name == "List") {
        doRuns(inner, iterations){List}
    } else {
        panic("unknown benchmark")
    }
}

def attemptBenchmarkExec(args: List[String]) = {
    val debugStartTime : Int = currentTimeNanos();

    args match {
        case Cons(x, Cons(y, Cons(z, Nil()))) => 
            (x, toInt(y), toInt(z)) match {
                case (benchName, Some(iterations), Some(innerIterations)) => 
                    doBenchmark(benchName, iterations, innerIterations);
                case _ => println("Unexpected non-integer(s) '" ++ show(y) ++ "', '" ++ show(z) ++ "'")
            }
        case other => println("usage: <benchmark> <iterations> <innerIterations>");
    }

    val diff = currentTimeNanos() - debugStartTime;
    val runTime = diff/1000;
    println("DEBUG: runner total took: " ++ show(runTime) ++ " us");
}

def main() = {
    attemptBenchmarkExec(["List","100", "100"])
}

