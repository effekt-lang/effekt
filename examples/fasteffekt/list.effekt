import examples/fasteffekt/benchmark


// class Element {
//   constructor(v) {
//     this.val = v;
//     this.next = null;
//   }
record Element (
    value: Int, child: Option[Element]
)

def length(element: Option[Element]): Int = 
    element match {
        case None() => return 0;
        case Some(Element(value, child)) => return 1 + length(child) 
    }
//   length() {
//     if (this.next === null) {
//       return 1;
//     }
//     return 1 + this.next.length();
//   }
// }

def isShorterThan(x: Option[Element], y: Option[Element]): Boolean = {
    var xTail:Option[Element] = x;
    var yTail:Option[Element] = y;
    var run = true;
    var bigger = false;
    while (run) {
        (xTail,yTail) match {
            case (_, None()) => run = false; bigger = false;
            case (None(), _) => run =false; bigger = true;
            case (Some(xx),Some(yy)) => xTail = xx.child; yTail = yy.child;
        }
    }
    return bigger;

//     while (yTail !== null) {
//       if (xTail === null) { return true; }
//       xTail = xTail.next;
//       yTail = yTail.next;
//     }
//     return false;

}

def makeList(lenght: Int): Option[Element] = {
    return if(lenght == 0) {
        None()
    } else {
        Some(Element(0, makeList(lenght-1)))
    }
}

  //no idea what that function does.
    def tail(x: Option[Element], y: Option[Element], z: Option[Element]): Option[Element] = {
        if (y.isShorterThan(x)) {
            (x,y,z) match {
                case (Some(xx),Some(yy),Some(zz)) => 
                    //compiler KNOWS that xx,yy,zz are not None() => can access children.

                    //all children have type Option[Element]
                    val xChild = xx.child;
                    val yChild = yy.child;
                    val zChild = zz.child;

                    val xxx = tail(xChild, y, z);
                    val yyy = tail(yChild, z, x);
                    val zzz = tail(zChild, x, y);
                    tail(
                        xxx,
                        yyy,
                        zzz
                    )
                case _ => panic("oh no!");
            }
        } else {
            z;
        }
    }

def List() = {
    println("run list benchmark");

    def benchmark(): Int = {
        val result = 
        tail(
            makeList(15),
            makeList(10),
            makeList(6)
        );
        length(result);
    }
    
    

    def verifyResult(result: Int): Boolean = {
        return result == 10;
    }

    return innerBenchmarkLoop(1){benchmark}{verifyResult};
}

def main() = {
    List();
}
// class List extends Benchmark {



//   tail(x, y, z) {
//     if (this.isShorterThan(y, x)) {
//       return this.tail(
//         this.tail(x.next, y, z),
//         this.tail(y.next, z, x),
//         this.tail(z.next, x, y)
//       );
//     }
//     return z;
//   }

//   verifyResult(result) {
//     return 10 === result;
//   }
// }

