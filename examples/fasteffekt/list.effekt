import examples/fasteffekt/benchmark

record Element (
    value: Int, child: Option[Element]
)

def length(element: Option[Element]): Int = //TODO length is 0 if next == Nil()
    element match {
        case None() => 0
        case Some(Element(value, child)) => 1 + length(child) 
    }

def isShorterThan(x: Option[Element], y: Option[Element]): Boolean = {
    var xTail:Option[Element] = x;
    var yTail:Option[Element] = y;
    var run = true;
    var bigger = false;
    while (run) {   //TODO use recursion here
        (xTail,yTail) match {
            case (_, None()) => run = false; bigger = false;
            case (None(), _) => run =false; bigger = true;
            case (Some(xx),Some(yy)) => xTail = xx.child; yTail = yy.child;
        }
    }
    return bigger;
}

def makeList(length: Int): Option[Element] = {
    if (length == 0) {
        None()
    } else {
        Some(Element(length, makeList(length-1)))
    }
}

//no idea what that function does.
def tail(x: Option[Element], y: Option[Element], z: Option[Element]): Option[Element] = {
    if (y.isShorterThan(x)) {
        (x,y,z) match {
            case (Some(xx),Some(yy),Some(zz)) => 
                val yChild : Option[Element] = yy.child;
                val zChild : Option[Element] = zz.child;
                val xChild : Option[Element] = xx.child;

                tail(
                    tail(xChild, y, z),
                    tail(yChild, z, x),
                    tail(zChild, x, y)
                )
            case _ => panic("oh no!");
        }
    } else {
        z;
    }
}

def List(_: Int) = {
    def benchmark(): Int = {
        val result = 
        tail(
            makeList(15),
            makeList(10),
            makeList(6)
        );
        length(result);
    }
    

    def verifyResult(result: Int): Boolean = {
        return result == 10;
    }

    return innerBenchmarkLoop(1){benchmark}{verifyResult};
}

def main() = {
    List(0);
}