type List[A] {
    Nil(); Cons(hd: A, tl: List[A])
}

def foldr[A,B](lst: List[A], init: B){ f: (A,B) => B }: B = {
    lst match {
        case Nil() => init
        case Cons(hd, tl) => f(hd, foldr(tl, init){f})
    }
} 

def main() = {
    val l = [1,2,3,4,5,6,7,8,9,10]
    val sum = foldr(l, 0){(x,y) => x + y}
    println(sum)
}