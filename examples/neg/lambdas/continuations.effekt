effect Raise(msg: String): Unit
effect Yield(): Unit

def main() = region this {

  // here we use the region of the main function
  var cont: () => Unit at this in this = box { () }

  try {
    try {
      do Yield();
      do Raise("broken");
      ()
    } with Yield {
      // the assignment is not valid since the continuation must not leave
      // the current scope, which is the one of Raise.
      cont = box { resume(()) };
      ()
    }
  } with Raise { msg =>
    println("exception " ++ msg ++ ", but we keep on going..."); resume(())
  }

  cont()
}
