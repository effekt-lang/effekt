effect State[T] {
  def get(): T
  def put[S](n: T, x: S): S
}

def foo() = {
  do get[Int]() + do get();
  do get() ++ ""
  do put(1, "")
}

def bar() =
 do get[Int]()

def two[A, B]() =
  Tuple2(do get[A](), do get[B]())

def main() = {
  var leak: () => String at {io} = fun() { "" };
  try {
    val (n1, n2) = two[Int, Int]();
    println(n1);
    println(n2);
    foo();
    (foo() ++ bar().show)
  } with State[Int] {
    def get() = resume(42)
    def put[S](n, x) = {
      val h = x;
      // resume(do get()) // ERROR
      resume(h)
    }
  } with State[String] {
    def get() = resume("")
    def put[S](n, x) = {
      val h = x;
      leak = fun() { resume(h) } // ERROR
      resume(h)
    }
  }
}