interface Eff {
    def op(f: Int => Int at {}) {greeter: Greet}: Int => Int at greeter / Greet
}

interface Greet {
    def greet(): Unit
} 

def constant[A](x: Int) { prog: () => A / Greet }: A =
    try {
        prog()
    } with Greet {
        def greet() = {
            resume(println(x))
        }
    }

def impl: Eff = new Eff {
    def op(f) {g: Greet} = {
        do greet()
        box { x =>
            do greet()
            f(x)
        }
    }
}