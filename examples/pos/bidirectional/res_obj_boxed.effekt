interface Eff {
    def op(f: Int => Int at {}) {greeter: Greet}: Int => Int at greeter / Greet
}

interface Greet {
    def greet(): Unit
}

def constant[A](x: Int) { f: () => A / Greet }: A =
    try {
        f()
    } with Greet {
        def greet() = resume(println(x))
    }

def eff2Impl: Greet = new Greet {
    def greet() = println("hello")
}

def h(): Int => Int at io / Greet =
    try {
        with constant(1);
        do op(box {x => x}) {eff2Impl}
    } with Eff {
        def op(f) = {
            with constant(2)
            do greet()
            resume { {eImpl: Greet} =>
                do greet()
                box { x =>
                    eImpl.greet();
                    f(x)
                }
            }
        }
    }

def eff1Impl: Eff = new Eff {
    def op(g) {eff2: Greet} = {
        do greet()
        box { x =>
            eff2.greet()
            g(x)
        }
    }
}

def main() = {
    with constant(3)
    println((eff1Impl.op(box {x => x}){eff2Impl})(42))
    println(h()(42))
}