extern interface Cap[U, V]

extern pure def cap[U, V](): Cap[U, V] at {} =
  js   "42"
  chez "42"

interface Foo[S] {
  def op[A]() {f: Cap[S, A]}: Cap[S, A] at {f} / { Exception[S] }
}

def main() = {
  def myCap = cap[Int, String]()
  try {
    report[Int] {
      val res: Cap[Int, String] at {} = do op() { myCap };
      ()
    }
  } with Foo[Int] {
    def op[B]() = {
      resume { {g: Cap[Int, B]} => do raise(42, "") }
    }
  }
}