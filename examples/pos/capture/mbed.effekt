extern interface Builtin

// Some Resources that we want to track
// ------------------------------------
extern resource out: Builtin
extern resource in: Builtin
extern resource block: Builtin
extern resource deep: Builtin

// Some Builtins pretending to use the resources
// ---------------------------------------------
extern {in}    def useIn(): Unit = default { () }
extern {out}   def useOut(): Unit = default { () }
extern {block} def performBlocking(): Unit = default { () }
extern {deep}  def blockDeepSleep(): Unit = default { () }

// Interrupt routines can only use in, out, and io
type ISR = () => Unit at {in, out, io}

def dontSleep { f: => Unit }: Unit = { blockDeepSleep(); f() }

interface Output {
  def set(n: Bool): Unit
  def get(): Bool
}

record Time(nanoseconds: Int)
def nanos(n: Int): Time = Time(n)
def millis(n: Int): Time = Time(n * 1000)
def seconds(n: Int): Time = Time(n * 1000000)

interface TimeAPI {
  def timeout(time: Time, callback: ISR): Unit
  def ticker(interval: Time, callback: ISR): Unit

  // it would be nice to model timer as
  // def timer: Timer
}

def precise = new TimeAPI {
  def timeout(time: Time, callback: ISR) = dontSleep { () }
  def ticker(interval: Time, callback: ISR) = dontSleep { () }
}

def imprecise = new TimeAPI {
  def timeout(time: Time, callback: ISR) = { () }
  def ticker(interval: Time, callback: ISR) = { () }
}

def assertNonblocking(f: ISR): Unit = f()

def wait(time: Time): Unit = { performBlocking() }

interface Loop[T] {
  def break(t: T): Unit
  def continue(): Unit
}
def loop[T] { f: => Unit / Loop[T] }: T = {
  def recurse(): T = try {
    f(); recurse()
  } with Loop[T] {
    def break(t) = t
    def continue() = recurse()
  }
  performBlocking();
  recurse()
}


def DigitalOut(name: String) = box new Output {
  def set(n: Bool) = useOut()
  def get() = { useOut(); true }
}


// EXAMPLE
// -------

def led1 = DigitalOut("LED1")
def led2 = DigitalOut("LED1")

def flip() = {
  // loop { () }
  led2.set(not(led2.get))
}

def main() = {
  var x = 10;

  loop[String] {

    // ok!
    precise.timeout(10.seconds, box {
      imprecise.timeout(10.seconds, box { () })
      println("hello")
    })

    x = x - 1
    if (x <= 0) do break("STOP");

    // also ok!
    precise.timeout(100.millis, box flip)
  }

  // not allowed!
  // precise.timeout(10.seconds, box {
  //   precise.timeout(10.millis)(box { () })
  // })

  // also not allowed!
  // precise.timeout(10.seconds, box {
  //   dontSleep {
  //     println("world!")
  //   }
  // })

  assertNonblocking(box {
    flip()
    // not allowed:
    // timeout(100.millis, flip)
  })
}
