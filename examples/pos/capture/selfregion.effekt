def bar {r: Region} = {
  var x in r = 42
  fun() { x = x + 1; x }
}

def ex1() = region this {
  val alloc = bar {this};

  alloc();
  println(alloc())
}

def ex2() = region r {
  var x in r = 42;
  println(x + x)
}

def ex3() = region this {
  var x in this = 42;
  println(x + x)
}

interface Yield { def yield(): Unit }

def ex4() = {
  // should not backtrack
  region r {
    try {
      val inc = bar {r};
      println(inc()) // 43
      do yield();
      println(inc()) // 44 | 45
    } with Yield { def yield() = { resume(()); resume(()) } }
  }
}

def ex5() =
  try {
    region r {
      val inc = bar {r};
      println(inc()) // 43
      do yield();
      println(inc()) // 44 | 44
    }
  } with Yield { def yield() = { resume(()); resume(()) } }


def ex6() = {
  val x = ref(42);
  println(x.get + x.get)
}

def main() = {
  ex1();
  ex2();
  ex3();
  ex4();
  ex5();
  ex6()
}