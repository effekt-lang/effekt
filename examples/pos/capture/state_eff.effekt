interface State[S] {
  def get(): S
  def set(x: S): Unit
}

def handleState[S, R](init: S) { prog: {State[S]} => R }: R = {
  val stateFun: S => R at {prog} =
    try {
      val res = prog {state}
      box {prog} { (s: S) => res }
    } with state: State[S] {
      def get() = box { (s: S) => (unbox resume(s))(s) }
      def set(x) = box { (s: S) => (unbox resume(()))(x) }
    }
  (unbox stateFun)(init)
}

def main() =
  handleState(0) { {s: State[Int]} => 
    println(s.get[Int]())
    s.set(2)
    println(s.get[Int]())
  }

