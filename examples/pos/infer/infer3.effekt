type Box[A] { MkBox(a: A) }

def make[A](): Box[A] = <>

def foo[B, C] { f: () => Box[B] } { g: () => Box[C] }: Tuple2[B, C] = <>

def maker[D, E] { f: Box[D] => E }: E = <>

def bar() = {
  val someBox = make()
  val x = foo { () => someBox } { () => someBox }
  val y: Tuple2[Int, Int] = x;
  ()
}

def baz() = {
  val res = maker {
    b1 => maker {
      b2 => if (true) b1 else b2
    }
  };
  val x: Box[Int] = res;
  ()
}

def main() = ()