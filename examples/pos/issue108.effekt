import immutable/list

type Option[A] {
  Present(value: A)
  Absent()
}

effect Iterate[A] {
  def emit(element: A): Unit
}

effect Reduce[A] {
  def consume(): Option[A]
}

def inRange(start: Int, end: Int): Unit / Iterate[Int] = {
  do emit(start)
  if (start != end) inRange(start + 1, end)
}

def intoList[A](): List[A] / Reduce[A] =
  do consume[A]() match {
    case Absent() => Nil()
    case Present(a) => Cons(a, intoList())
  }

def mapping[A, B] {f: A => B} : Unit / {Reduce[A], Iterate[B]} =
  do consume[A]() match {
    case Absent() => ()
    case Present(a) =>
      do emit(f(a))
      mapping { a => f(a) }
  }

def reduce[A, B] {iterator: () => Unit / Iterate[A]} {reducer: () => B / Reduce[A]} = {
  var coroutine = fun() {Absent()}
  coroutine = fun() {
    try {
      iterator()
      Absent()
    } with Iterate[A] {
      def emit(e) = {
        coroutine = fun() {resume(())}
        Present(e)
      }
    }
  }
  try {
    reducer()
  } with Reduce[A] {
    def consume() = resume(coroutine())
  }
}

def transduce[A, B, C]
      {iterator: () => Unit / Iterate[A]}
      {transducer: () => Unit / {Reduce[A], Iterate[B]}}
      {reducer: () => C / Reduce[B]}
    : C = {
  reduce[A, C] { () => iterator() } {
    reduce[B, C] { () => transducer() } { () => reducer() }
  }
}

def works() = {
  reduce[Int, List[Int]] {
    inRange(0, 5)
  } {
    reduce[Int, List[Int]] {
      mapping[Int, Int] {x => x * x}
    } {
      intoList()
    }
  }
}

def fails() = {
  transduce[Int, Int, List[Int]] {inRange(0, 5)} {mapping[Int, Int] {x => x * x}} {intoList()}
}

def main() = {
  println(works());
  println("---");
  println(fails())
}