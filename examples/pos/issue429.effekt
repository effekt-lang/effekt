// Test generic equality implementation
type MyType {
  MySingleCase()
}

record EmptyRecord()

record Person(name: String, age: Int)

// Binary tree with values in nodes
type Tree[T] {
  Leaf();
  Node(value: T, left: Tree[T], right: Tree[T])
}

// Create a simple tree for testing
def createTree[T](depth: Int, value: T): Tree[T] = {
  if (depth <= 0) {
    Leaf()
  } else {
    Node(value, createTree(depth - 1, value), createTree(depth - 1, value))
  }
}

// Create a more complex tree with different values
def createMixedTree(): Tree[Int] = {
  Node(1, 
    Node(2, Leaf(), Leaf()),
    Node(3, 
      Node(4, Leaf(), Leaf()),
      Leaf()
    )
  )
}

def main() = {
  // Original tests
  println("=== Basic equality tests ===")
  println(MySingleCase().equals(MySingleCase()))   // ~> true
  println(EmptyRecord().equals(EmptyRecord()))    // ~> true
  println(Some(MySingleCase()).equals(Some(MySingleCase()))) // ~> true
  println(Some(EmptyRecord()).equals(Some(EmptyRecord())))   // ~> true
  println([Some(EmptyRecord()), Some(EmptyRecord()), None()].equals([Some(EmptyRecord()), Some(EmptyRecord()), None()]))

  // Enhanced tests with records and nested structures
  println("\n=== Record equality tests ===")
  val person1 = Person("Alice", 30)
  val person2 = Person("Alice", 30)
  val person3 = Person("Bob", 25)
  println(person1.equals(person2))  // ~> true
  println(person1.equals(person3))  // ~> false
  println(Person("Alice", 30).equals(Person("Alice", 30)))  // ~> true
  
  // Test nested records
  println("\n=== Nested structure tests ===")
  println(Some(person1).equals(Some(person2)))  // ~> true
  println(Some(person1).equals(Some(person3)))  // ~> false
  println([person1, person2].equals([person1, person2]))  // ~> true
  println([person1, person3].equals([person1, person2]))  // ~> false
  
  // Tree equality tests
  println("\n=== Tree equality tests ===")
  val tree1 = createTree(3, 42)
  val tree2 = createTree(3, 42)
  val tree3 = createTree(2, 42)
  val tree4 = createTree(3, 100)
  
  println(tree1.equals(tree2))  // ~> true
  println(tree1.equals(tree3))  // ~> false
  println(tree1.equals(tree4))  // ~> false
  
  val mixedTree1 = createMixedTree()
  val mixedTree2 = createMixedTree()
  println(mixedTree1.equals(mixedTree2))  // ~> true
  
  // Even more complex nested structures
  println("\n=== Complex nested structure tests ===")
  val nestedList1 = [Some(tree1), None(), Some(mixedTree1)]
  val nestedList2 = [Some(tree2), None(), Some(mixedTree2)]
  val nestedList3 = [Some(tree3), None(), Some(mixedTree1)]
  
  println(nestedList1.equals(nestedList2))  // ~> true
  println(nestedList1.equals(nestedList3))  // ~> false
  
  val complexRecord = Person("Charlie", 35)
  val recordWithTree = [complexRecord, Person("Dave", 40), Person("Charlie", 35)]
  println(recordWithTree.equals([complexRecord, Person("Dave", 40), Person("Charlie", 35)]))  // ~> true
  println(recordWithTree.equals([complexRecord, Person("Dave", 40), Person("Charlie", 36)]))  // ~> false
}