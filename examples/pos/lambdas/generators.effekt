effect Yield(n: Int): Unit

type Result {
  Next(n: Int);
  Done()
}

def numbers() = {
  do Yield(1);
  do Yield(2);
  do Yield(3)
}

def main() = region this {

  var generator: () => Result at {this} in this = box { Done() }

  try {
    numbers()
    generator = box { Done() }
  } with Yield { n =>
    generator = box { resume(()); Next(n) }
  }

  // right now we do not infer unbox for a mutable variable since it
  // already is of block type.
  def gen() = generator()
  println(gen())
  println(gen())
  println(gen())
  println(gen())
  println(gen())
}

def println(g: Result): Unit = g match {
  case Done()  => println("Done()")
  case Next(n) => println("Next(" ++ show(n) ++ ")")
}
