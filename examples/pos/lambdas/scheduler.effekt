module examples/pos/lambdas/scheduler

import dequeue

interface Proc {
  def yield(): Unit
  def fork(): Bool
  def exit(): Unit
}

def scheduler { prog: => Unit / Proc } = region this {
  var queue: Dequeue[() => Unit at {this, prog}] in this = emptyQueue();

  def run(): Unit = queue.popBack match {
    case None() => ()
    case Some((k, q)) =>
      queue = q
      k();
      run()
  }
  try { prog() } with Proc {
    def yield() = {
      queue = queue.pushFront(box { resume(()) })
    }
    def fork() = {
      queue = queue
        .pushFront(box { resume(true) })
        .pushFront(box { resume(false) })
    }
    def exit() = ()
  }

  run()
}

def fork { b1: => Unit / Proc } { b2: => Unit / Proc } =
  if (do fork()) { b1() } else { b2() }

def main() = {
  println("Example 1")
  scheduler {
    fork {
      println("hello 1")
      do yield()
      println(1)
      do yield()
      println(2)
      do exit()
      println(3)
    } {
      println("hello 2")
      do yield()
      println(4)
      do yield()
      println(5)
      do yield()
      println(6)
    }
  }
}
