effect Raise(msg: String): Unit
effect Flip(): Bool

def main() = {

  try {

    // Here the block is annotated as pure. In consequence, it will not
    // obtain a capability but close over it lexically.
    def block(msg: String): Unit / {} = { do Raise(msg) }

    val f: () => Unit at raise = try {
      // here we create first class functions that close over block.
      // since `block` closes over `Raise` we have to make sure that
      // it cannot leave the outer `try`.
      if (do Flip()) {
        fun() { block("first") }
      } else {
        fun() { block("second") }
      }
    } with Flip {
      // the continuation itself transitively closes over `block` and `Raise`.
      // it also must not leave the scope of Raise.
      val h: () => Unit at raise = fun() { (resume(true))(); (resume(false))() }
      h
    }

    f();
    // try dropping the parens here to see the type error:
    f()
  } with raise: Raise { msg =>
    println("exception " ++ msg); resume(())
  }
}
