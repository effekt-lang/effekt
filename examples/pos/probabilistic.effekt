module probabilistic

import list

effect indexOutOfBounds(): Nothing

def lookup[A](l: List[A], idx: Int): A / indexOutOfBounds = l match {
  case Nil() => do indexOutOfBounds()
  case Cons(n, rest) => if (idx == 0) n else lookup(rest, idx - 1)
}

def updateAt[A](l: List[A], idx: Int, el: A): List[A] / indexOutOfBounds = l match {
  case Nil() => do indexOutOfBounds()
  case Cons(n, rest) => if (idx == 0) { Cons(el, rest) } else Cons(n, updateAt(rest, idx - 1, el))
}

def length[A](l: List[A]): Int = l match {
  case Nil() => 0
  case Cons(_, rest) => 1 + length(rest)
}

type Var {
  Unobserved();
  Observed(value: Bool)
}

def show(x: Var) = x match {
  case Unobserved() => "Unobserved()"
  case Observed(value) => "Observed(" ++ value.show ++ ")"
}

type Ref { MkRef(n: Int) }

interface Heap {
  def empty(v: Var): Ref
  def get(r: Ref): Var
  def put(r: Ref, v: Var): Unit
}

def heap[R] { prog: => R / Heap } = {
  var cells: List[Var] = Nil();
  var n = 0;
  try { prog() } with Heap {
    def empty(v) = { cells = Cons(v, cells); val ref = MkRef(n); n = n + 1; resume(ref) }
    def get(r) = r match {
      case MkRef(idx) => resume(lookup(cells, (length(cells) - idx) - 1))
    }
    def put(r, v) = r match {
      case MkRef(idx) =>
        cells = updateAt(cells, (length(cells) - idx) - 1, v);
        resume(())
    }
  }
}

effect flip(prob: Double): Ref
effect disj(x: Ref, y: Ref): Ref
effect prior(x: Ref, prob: Double): Unit

effect score(prob: Double): Unit
effect fork(): Bool
effect fail(): Nothing

def obs(r: Ref, a: Bool) =
  do get(r) match {
    case Unobserved() => do put(r, Observed(a))
    case Observed(y) => if (a == y) { () } else { do fail() }
  }

def choose3[R] { x: => R } { y: => R } { z: => R } : R / fork =
  if (do fork()) { x() } else if (do fork()) { y() } else { z() }

type Weighted[R] { MkWeighted(weight: Double, value: R) }

def showRounded(d: Double): String = show(d.round(2))

def show(w: Weighted[Bool]): String = w match {
  case MkWeighted(weight, value) => "MkWeighted(" ++ showRounded(weight) ++ ", " ++ show(value) ++ ")"
}

def show(w: Weighted[Var]): String = w match {
  case MkWeighted(weight, Observed(value)) => "MkWeighted(" ++ showRounded(weight) ++ ", Observed(" ++ show(value) ++ "))"
  case MkWeighted(weight, Unobserved()) => "MkWeighted(" ++ showRounded(weight) ++ ", Unobserved())"
}

def handleProb[R] { prog: => R / { score, fork, fail } } = {
  val empty: List[Weighted[R]] = Nil();
  try {
    var current = 1.0;
    try {
      val res = prog();
      Cons(MkWeighted(current, res), empty)
    } with score { p => current = current * p; resume(()) }
  } with fork { () => append(resume(true), resume(false)) }
    with fail { () => empty }
}

def fresh(): Ref / Heap = do empty(Unobserved())

def handleLang(expected: Bool) { prog: Ref => Ref / { flip, disj, prior }}: Var / {indexOutOfBounds, score, fail, fork} = heap {
  val input = fresh();
  try { do put(prog(input), Observed(expected)) }
  with flip { p =>
    val res: Ref = fresh();
    resume(res);
    do get(res) match {
      case Unobserved() => ()
      case Observed(b) => if (b) { do score(p) } else { do score(1.0 - p) }
    }
  } with disj { (x, y) =>
    val res: Ref = fresh();
    resume(res);
    do get(res) match {
      case Unobserved() => ()
      case Observed(b) => if (b) { choose3 {
        obs(x, false); obs(y, true)
      } {
        obs(x, true); obs(y, false)
      } {
        obs(x, true); obs(y, true)
      } } else { obs(x, false); obs(y, false) }
    }
  } with prior { (x, p) =>
    resume(());
    do get(x) match {
      case Unobserved() => ()
      case Observed(b) => if (b) { do score(p) } else { do score(1.0 - p) }
    }
  };
  do get(input)
}

def test() = {
  if (do fork()) {
    do score(0.2);
    false
  } else {
    do score(0.8);
    if (do fork()) {
      do score(0.6);
      true
    } else {
      do score(0.4);
      false
    }
  }
}

def heapTest() = heap {
  val r1 = do empty(Unobserved());
  val r2 = do empty(Unobserved());
  val r3 = do empty(Unobserved());
  println(show(do get(r1)) ++ show(do get(r2)) ++ show(do get(r3)));

  do put(r2, Observed(true));
  println(show(do get(r1)) ++ show(do get(r2)) ++ show(do get(r3)));

  do put(r3, Observed(false));
  println(show(do get(r1)) ++ show(do get(r2)) ++ show(do get(r3)));

  do put(r2, Observed(false));
  println(show(do get(r1)) ++ show(do get(r2)) ++ show(do get(r3)))
}

def catch[R] { p: => R / indexOutOfBounds }: Unit =
  try { p(); () }
  with indexOutOfBounds { () => println("Index out of bounds!") }

def main() = {
  val res = handleProb {
    test()
  };
  println(show(res) { e => show(e) })

  catch {
    heapTest()
  };

  catch {
    val res = handleProb {
      handleLang(true) { r =>
        do disj(do flip(0.2), r)
      }
    };
    println(show(res) { e => show(e) })
  }

}
