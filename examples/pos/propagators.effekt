module drafts/propagators

import immutable/option
import immutable/list
import immutable/dequeue
import unsafe/cont
import mutable/heap

// An Experiment with Propagator Networks
// ===

// should be abstract, once we have higher-kinded types or modules
// we are using unsafe/Cont since operations cannot take blocks
// Safety is established manually and restricted to the local scope of
// the handler `propagators`.
type Cell[T] = HeapRef[Tuple2[Option[T], List[Cont[T, Unit]]]]

// A net of propagators
effect Net {
  def unknown[R](): Cell[R]
  def make[R](value: R): Cell[R]

  def learn[A](cell: Cell[A], value: A): Unit

  // this really needs to be Cell[A] and { A => Unit / Net } since
  // the updater needs to be run "in parallel". In particular it should
  // only span this block, not the entire remaining computation.
  def subscribe[A](cell: Cell[A]): Option[A]

  // To model a scoped operation, we also include abort, which aborts the current strand of updating
  def abort(): Unit
}

def watch[A](cell: Cell[A]) { f: A => Unit }: Unit / { Net } =
  do subscribe(cell).foreach { a =>
    println("received a " ++ a.show);
    f(a); do abort() } // this abort seems to abort also other subscribers?

// establishes a connection between cellA and cellB
// will run f once the value of cellA is available to update cellB
def connect[A, B](cellA: Cell[A], cellB: Cell[B]) { f: A => B }: Unit / { Net } =
  cellA.watch { a  => do learn(cellB, f(a)) }

def connect[A, B, C](cellA: Cell[A], cellB: Cell[B], cellC: Cell[C]) { f: (A, B) => C }: Unit / { Net } = {
  cellA.watch { a => do subscribe(cellB).foreach { b => do learn(cellC, f(a, b)) } }
  cellB.watch { b => do subscribe(cellA).foreach { a => do learn(cellC, f(a, b)) } }
}

def sumOf(res: Cell[Int], arg1: Cell[Int], arg2: Cell[Int]) = {
  connect(arg1, arg2, res) { (a, b) => a + b }
  connect(res, arg2, arg1) { (a, b) => a - b }
  connect(res, arg1, arg2) { (a, b) => a - b }
}

def negated(that: Cell[Int], inverse: Cell[Int]) = {
  that.connect(inverse) { x => (0 - x) }
  inverse.connect(that) { x => (0 - x) }
}

def example() = {
  println("make 7")
  val x = do make(7);
  println("make 3")
  val y = do make(3);
  println("unknown z")
  val z = do unknown[Int]()

  println("unknown o")
  val o = do unknown[Int]()

  println("o = z + z")
  o.sumOf(z, z)

  println("z = y + x")
  z.sumOf(y, x)

  println(do subscribe(z))
}

// cells must not leave the propagator!
def propagators { net: => Unit / Net }: Unit = {

  val noop = cont[Unit, Unit] { _ => () }

  var updates = emptyQueue[Cont[Unit, Unit]]()

  def run(): Unit = (updates.popBack) match {
    case Some((update, q)) =>
      updates = q
      update.apply(())
      run()
    case _ => ()
  }

  def enqueue { update: => Unit / {} } =
    updates = updates.pushFront(cont { _ => update() })

  def enqueue[A](value: A, subs: List[Cont[A, Unit]]) =
    subs.foreach { k => enqueue { k.apply(value) }}

  try { net(); run() } with Net {
    def unknown[R]() =
      resume(fresh(Tuple2(None(), Nil())))
    def make[R](value) =
      resume(fresh(Tuple2(Some(value), Nil())))
    def learn[A](cell, value) = get(cell) match {
      case (None(), k) =>
        // update network with new information
        put(cell, Tuple2(Some(value), Nil()));
        enqueue(value, k)
        resume(())
        run()

      // we already knew it!
      case (Some(v), k) => if (v == value) {
        resume(())
        run()
      } else {
        // contradiction
        println("contradiction: " ++ value.show ++ " and " ++ v.show);
        ()
      }
    }
    def subscribe[A](cell) = get(cell) match {
      case (None(), k) =>
        put(cell, Tuple2(None(), Cons(cont { a => resume(Some(a)); }, k)))
        resume(None())
        run()
      case (Some(a), k) =>
        resume(Some(a))
        run()
    }
    // we choose to not abort, if the queue is empty
    def abort() = if (updates.isEmpty) resume(()) else run()
  }
  run()
}

def main() = propagators {
  println("Running network")
  example()
}