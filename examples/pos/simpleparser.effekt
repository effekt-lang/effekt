module examples/pos/simpleparser

import string
import regex

effect fail(msg: String): Nothing

def stringToInt(str: String): Int / { fail } = {
  with default[WrongFormat, Int] { do fail("cannot convert input to integer") };
  str.toInt
}

def perhapsAdd(): Int / { fail } = stringToInt("1") + stringToInt("2")

def handledExample() = try { perhapsAdd() } with fail { (msg) => println(msg); 0 }


effect next(): String

def print3(): Unit / { next } = {
  println(do next());
  println(do next());
  println(do next())
}

def alwaysHello[R] { prog: () => R / next }: R / {} =
  try { prog() } with next { () => resume("hello") }

def number() : Int / { next, fail } =
  stringToInt(do next())

def feed[R](input: List[String]) { prog: () => R / next } : R / fail = {
  var remaining = input;
  try { prog() } with next { () =>
    remaining match {
      case Nil() => do fail("End of input")
      case Cons(element, rest) => remaining = rest; resume(element)
    }
  }
}


effect flip(): Bool

def many[R] { prog: () => R }: List[R] / flip = {
  var result: List[R] = Nil();
  while (do flip()) {
    result = Cons(prog(), result)
  };
  reverse(result)
}

type Result[R] {
  Success(res: R);
  Failure(msg: String)
}

def backtrack[R] { prog: () => R / { fail, flip } }: Result[R] / {} =
  try {
    Success(prog())
  } with fail { (msg) =>
    Failure(msg)
  } with flip { () =>
    resume(true) match {
      case Failure(msg) => resume(false)
      case Success(res) => Success(res)
    }
  }


effect Parser = { fail, flip, next }

def manyNumbers() : List[Int] / Parser = many { number() }

def parse[R](input: List[String]) { prog: () => R / Parser }: Result[R] / {} =
  backtrack { feed(input) { prog() } }


def main() = {
  inspect(parse(["12", "34", "56"]) { manyNumbers() })
  // Success(Cons(12, Cons(34, Cons(56, Nil()))))
}
