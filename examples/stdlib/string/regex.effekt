module example/stdlib/text/regex

import text/regex

def printSome[T](it: Option[T]) {f: T => String}: Unit = {
  it match {
    case Some(v) => println(f(v))
    case None() => println("None")
  }
}

def printMatched(reg: Regex): Regex = {
  printSome(reg.capture) { it => it.matched }
  reg
}

def printIndices(reg: Regex): Regex ={
  printSome(reg.capture) { it =>
    "(" ++ it.start.show() ++ ", " ++ it.end.show() ++ ")"
  }
  reg
}

def printGroups(reg: Regex): Regex = {
  printSome(reg.capture) { it =>
    it.groups.map { g => g.matched }.join("\n")
  }
  reg
}


def printGroupIndices(reg:Regex): Regex = {
  printSome(reg.capture) { it =>
    it.groups.map { g => g.index().show() }.join("\n")
  }
  reg
}

def main() = {
  val src = "ab cd efg hij k l m n"

  // stateless regex
  var rgx1 = regex("\\w+ \\w+", [])
  rgx1 = rgx1.exec(src).printMatched()
  rgx1 = rgx1.exec(src).printMatched()

  // stateful regex
  var rgx2 = regex("\\w+ \\w+", [Global()])
  rgx2 = rgx2.exec(src).printMatched()
  rgx2 = rgx2.exec(src).printMatched()
  rgx2 = rgx2.exec(src).printMatched()
  rgx2 = rgx2.exec(src).printMatched()
  rgx2 = rgx2.exec(src).printMatched()

  // indices
  var rgx3 = regex("\\w+ \\w+", [Global()])
  rgx3 = rgx3.exec(src).printIndices()

  // capture groups
  var rgx4 = regex("(\\w+) (\\w+)")
  rgx4 = rgx4.exec(src)
  rgx4.printMatched()
  rgx4.printGroups()
  rgx4.printGroupIndices()


  // example ussage
  var rx = regex("(\\w+)\\s(\\d+)", [Global()])
  val text = "Hello 123 World 456"
  loop  { {l} =>
    rx = rx.exec(text)
    rx.capture match  {
      case Some(m) =>
        println("matched: " ++ m.matched ++ " range: (" ++ m.start.show() ++ ", " ++ m.end.show() ++ ")")
      case None() => l.break()
    }
  }
}
