module immutable/list

import immutable/option
import immutable/cslist

type List[A] {
  Nil();
  Cons(head: A, tail: List[A])
}

def map[A, B](l: List[A]) { f: A => B } : List[B] =
  l match {
    case Nil() => Nil[B]()
    case Cons(a, rest) => Cons(f(a), map(rest) { a => f(a) })
  }

def foreach[A](l: List[A]) { f: A => Unit } : Unit =
  l match {
    case Nil() => ()
    case Cons(a, rest) =>
      f(a);
      foreach(rest) { a => f(a) }
  }

def size[A](l: List[A]): Int = l match {
  case Nil() => 0
  case Cons(_, rest) => 1 + rest.size
}

def reverse[A](l: List[A]): List[A] = {
  def reverseWith(l: List[A])(acc: List[A]): List[A] = l match {
    case Nil() => acc
    case Cons(a, rest) => rest.reverseWith(Cons(a, acc))
  }
  l.reverseWith(Nil())
}

// [1,2,3].reverseOnto([4,5,6])
// [3,2,1,4,5,6]
def reverseOnto[A](l: List[A])(other: List[A]): List[A] = l match {
  case Nil() => other
  case Cons(a, rest) => rest.reverseOnto(Cons(a, other))
}

// [1,2,3].append([4,5,6])
// [3,2,1].reverseOnto([4,5,6])
// [1,2,3,4,5,6]
def append[A](l: List[A])(other: List[A]): List[A] =
  l.reverse.reverseOnto(other)

// gracefully fails
def take[A](l: List[A])(n: Int): List[A] =
  if (n == 0) {
    Nil()
  } else l match {
    case Nil() => Nil()
    case Cons(a, rest) => Cons(a, rest.take(n - 1))
  }

def drop[A](l: List[A])(n: Int): List[A] =
  if (n == 0) {
    l
  } else l match {
    case Nil() => Nil()
    case Cons(a, rest) => rest.drop(n - 1)
  }

def isEmpty[A](l: List[A]): Boolean = l match {
  case Nil() => true
  case Cons(a, rest) => false
}

// raises a runtime exception that can't be caught
def head[A](l: List[A]): A = l match {
  case Nil() => error("Trying to get the head of an empty list")
  case Cons(a, rest) => a
}

def tail[A](l: List[A]): List[A] = l match {
  case Nil() => error("Trying to get the head of an empty list")
  case Cons(a, rest) => rest
}

def headOption[A](l: List[A]): Option[A] = l match {
  case Nil() => None()
  case Cons(a, rest) => Some(a)
}


def toChez[A](l: List[A]): CSList[A] = l match {
  case Nil() => nil()
  case Cons(a, rest) => cons(a, rest.toChez)
}

def fromChez[A](l: CSList[A]): List[A] =
  if (l.isEmpty) Nil() else Cons(l.head, l.tail.fromChez)