module immutable/option

type Option[A] {
  None();
  Some(value: A)
}

def isDefined[A](self: Option[A]): Boolean = self match {
  case None()  => false
  case Some(v) => true
}

def isEmpty[A](self: Option[A]): Boolean =
  self.isEmpty.not

def orElse[A](self: Option[A]) { that: Option[A] }: Option[A] = self match {
  case None()  => that()
  case Some(v) => Some(v)
}

def getOrElse[A](self: Option[A]) { that: A }: A = self match {
  case None() => that()
  case Some(v) => v
}

def map[A, B](self: Option[A]) { f: A => B }: Option[B] = self match {
  case None()  => None()
  case Some(v) => Some(f(v))
}

def foreach[A](self: Option[A]) { f: A => Unit }: Unit = self match {
  case None()  => ()
  case Some(v) => f(v)
}

def undefinedToOption[A](value: A): Option[A] =
  if (value.isUndefined) { None() } else { Some(value) }