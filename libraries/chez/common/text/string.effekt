module text/string

import immutable/option

// def charAt(str: String, index: Int): Option[String] =
//     str.unsafeCharAt(index).undefinedToOption

extern pure def length(str: String): Int =
  "(string-length ${str})"

extern pure def repeat(str: String, n: Int): String =
  "(letrec ([repeat (lambda (${n} acc) (if (<= ${n} 0) acc (repeat (- ${n} 1) (string-append acc ${str}))))]) (repeat ${n} (list->string '())))"

extern pure def unsafeSubstring(str: String, from: Int, to: Int): String =
  "(substring ${str} ${from} ${to})"

def substring(str: String, from: Int, to: Int): String = {
  def clamp(lower: Int, x: Int, upper: Int) = max(lower, min(x, upper))

  val len = str.length
  val clampedTo = clamp(0, to, len)
  val clampedFrom = clamp(0, from, to)

  str.unsafeSubstring(clampedFrom, clampedTo)
}

def substring(str: String, from: Int): String =
  str.substring(from, str.length)

// extern pure def trim(str: String): String =
//   "str.trim()"

def toInt(str: String): Option[Int] =
  str.unsafeToInt.undefinedToOption

// extern pure def unsafeCharAt(str: String, n: Int): String =
//   "str[n]"

// returns #f if not a number
extern pure def unsafeToInt(str: String): Int =
  "(string->number ${str})"

// ANSI escape codes
val ANSI_GREEN = "\033[32m"
val ANSI_RED = "\033[31m"
val ANSI_RESET = "\033[0m"