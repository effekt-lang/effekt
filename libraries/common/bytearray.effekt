module bytearray

/**
 * A memory managed, mutable, fixed-length array of bytes.
 */
extern type ByteArray
  // = llvm "%Pos"
  // = js "Uint8Array"
  // = chez "bytevector"

/// Allocates a new bytearray with the given `size`, its values are undefined.
extern global def allocate(size: Int): ByteArray =
  js "(new Uint8Array(${size}))"
  llvm """
    %arr = call %Pos @c_bytearray_new(%Int ${size})
    ret %Pos %arr
  """
  chez "(make-bytevector ${size})"

extern pure def size(arr: ByteArray): Int =
  js "${arr}.length"
  llvm """
    %size = call %Int @c_bytearray_size(%Pos ${arr})
    ret %Int %size
  """
  chez "(bytevector-length ${arr})"

extern global def unsafeGet(arr: ByteArray, index: Int): Byte =
  js "(${arr})[${index}]"
  llvm """
    %byte = call %Byte @c_bytearray_get(%Pos ${arr}, %Int ${index})
    ret %Byte %byte
  """
  chez "(bytevector-u8-ref ${arr} ${index})"

extern global def unsafeSet(arr: ByteArray, index: Int, value: Byte): Unit =
  js "bytearray$set(${arr}, ${index}, ${value})"
  llvm """
    %z = call %Pos @c_bytearray_set(%Pos ${arr}, %Int ${index}, %Byte ${value})
    ret %Pos %z
  """
  chez "(bytevector-u8-set! ${arr} ${index} ${value})"

def resize(source: ByteArray, size: Int): ByteArray = {
  val target = allocate(size)
  val n = min(source.size, target.size)
  def go(i: Int): ByteArray =
    if (i < n) {
      target.unsafeSet(i, source.unsafeGet(i))
      go(i + 1)
    } else {
      target
    }
  go(0)
}

def foreach(arr: ByteArray){ action: Byte => Unit }: Unit =
  each(0, arr.size) { i =>
    action(arr.unsafeGet(i))
  }

def foreach(arr: ByteArray){ action: (Byte) {Control} => Unit }: Unit =
  each(0, arr.size) { (i) {label} =>
    action(arr.unsafeGet(i)) {label}
  }

def foreachIndex(arr: ByteArray){ action: (Int, Byte) => Unit }: Unit =
  each(0, arr.size) { i =>
    action(i, arr.unsafeGet(i))
  }

def foreachIndex(arr: ByteArray){ action: (Int, Byte) {Control} => Unit }: Unit =
  each(0, arr.size) { (i) {label} =>
    action(i, arr.unsafeGet(i)) {label}
  }

extern pure def fromString(str: String): ByteArray =
  js "(new TextEncoder().encode(${str}))"
  llvm """
    ret %Pos ${str}
  """
  chez "(string->utf8 ${str})"

extern pure def toString(arr: ByteArray): String =
  js "(new TextDecoder('utf-8').decode(${arr}))"
  // assuming the buffer is already in UTF-8
  llvm """
    ret %Pos ${arr}
  """
  chez "(utf8->string ${arr})"

extern js """
  function bytearray$set(bytes, index, value) {
    bytes[index] = value;
    return $effekt.unit;
  }

  function bytearray$compare(arr1, arr2) {
    const len = Math.min(arr1.length, arr2.length);

    for (let i = 0; i < len; i++) {
      if (arr1[i] !== arr2[i]) {
        return arr1[i] < arr2[i] ? -1 : 1;
      }
    }

    if (arr1.length !== arr2.length) {
      return arr1.length < arr2.length ? -1 : 1;
    } else {
      return 0;
    }
  }
"""

extern chez """
  (define (bytearray$compare b1 b2)
    (let ([len1 (bytevector-length b1)]
          [len2 (bytevector-length b2)]
          [minlen (min (bytevector-length b1) (bytevector-length b2))])
      (let loop ([i 0])
        (cond
          [(= i minlen)
          (cond [(< len1 len2) -1]
                [(> len1 len2) 1]
                [else 0])]
          [(< (bytevector-u8-ref b1 i) (bytevector-u8-ref b2 i)) -1]
          [(> (bytevector-u8-ref b1 i) (bytevector-u8-ref b2 i)) 1]
          [else (loop (+ i 1))]))))
"""

extern pure def compareByteArrayImpl(b1: ByteArray, b2: ByteArray): Int =
  js "bytearray$compare(${b1}, ${b2})"
  llvm """
    %x = call %Int @c_bytearray_compare(%Pos ${b1}, %Pos ${b2})
    ret %Int %x
  """
  chez "(bytearray$compare ${b1} ${b2})"

def compareByteArray(b1: ByteArray, b2: ByteArray): Ordering = {
  val ret = compareByteArrayImpl(b1, b2)
  if (ret == 0) {
    Equal()
  } else if (ret < 0) {
    Less()
  } else { // ret > 0
    Greater()
  }
}

def compareStringBytes(left: String, right: String): Ordering = {
  val l = left.fromString
  val r = right.fromString
  compareByteArray(l, r)
}
