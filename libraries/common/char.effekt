/// Warning: This library currently only works with ASCII characters, **not** unicode!
module char

import effekt
import exception
import option
import result


/// Checks if the given character is an ASCII whitespace
def isWhitespace(c: Char): Bool = c match {
  case ' '    => true
  case '\n'   => true
  case '\r'   => true
  case '\t'   => true
  case '\u0B' => true // vertical tab
  case '\u0C' => true // form feed
  case _      => false
}

/// Gets the value of a given ASCII digit in base 10,
/// throwing an exception on wrong format
def digitValue(char: Char): Int / Exception[WrongFormat] =
  if (char >= '0' && char <= '9') {
    char.toInt - '0'.toInt
  } else {
    wrongFormat("Not a valid digit: '" ++ char.toString ++ "' in base 10")
  }

/// Gets the value of a given ASCII digit in base 10,
/// returning None on wrong format
def digitValue(char: Char): Option[Int] =
  on[WrongFormat].option { digitValue(char) }

/// Gets the value of a given ASCII digit in base 16,
/// throwing an exception on wrong format
def hexDigitValue(char: Char): Int / Exception[WrongFormat] =
  char match {
    case char and char >= '0' && char <= '9' => char.toInt - '0'.toInt
    case char and char >= 'A' && char <= 'F' => (char.toInt - 'A'.toInt) + 10
    case char and char >= 'a' && char <= 'f' => (char.toInt - 'a'.toInt) + 10
    case _ => wrongFormat("Not a valid digit: '" ++ char.toString ++ "' in base 16")
  }

/// Gets the value of a given ASCII digit in base 16,
/// returning None on wrong format
def hexDigitValue(char: Char): Option[Int] =
  on[WrongFormat].option { hexDigitValue(char) }

/// Gets the value of a given ASCII digit in the given base up to 36,
/// throwing an exception on wrong format
def digitValue(char: Char, base: Int): Int / Exception[WrongFormat] = {
  val digit = char match {
    case char and char >= '0' && char <= '9' => char.toInt - '0'.toInt
    case char and char >= 'A' && char <= 'Z' => (char.toInt - 'A'.toInt) + 10
    case char and char >= 'a' && char <= 'z' => (char.toInt - 'a'.toInt) + 10
    case _ => wrongFormat("Not a valid digit: '" ++ char.toString ++ "'")
  }
  if (digit >= base) {
    wrongFormat("Digit '" ++ digit.show ++ "' is too big for base " ++ base.show)
  }
  digit
}

/// Gets the value of a given ASCII digit in the given base up to 36,
/// returning None on wrong format
def digitValue(char: Char, base: Int): Option[Int] =
  on[WrongFormat].option { digitValue(char, base) }

/// Checks if the given character is an ASCII digit in base 10
/// Prefer using `digitValue(c: Char)` to get the numeric value out.
def isDigit(char: Char): Bool = result[Int, WrongFormat] { digitValue(char) }.isSuccess

/// Checks if the given character is an ASCII digit in base 16
/// Prefer using `hexDigitValue(c: Char)` to get the numeric value out.
def isHexDigit(char: Char): Bool = result[Int, WrongFormat] { hexDigitValue(char)}.isSuccess

/// Checks if the given character is an ASCII digit in base 10
/// Prefer using `digitValue(c: Char, base: Int)` to get the numeric value out.
def isDigit(char: Char, base: Int): Bool = result[Int, WrongFormat] { digitValue(char, base) }.isSuccess

/// Checks if a given character is a 7-bit ASCII character
def isASCII(c: Char): Bool = { c.toInt < 128 }

/// Checks if a given character is an ASCII lower alphabetic character
def isLower(c: Char): Bool = { c >= 'a' && c <= 'z' }

/// Checks if a given character is an ASCII upper alphabetic character
def isUpper(c: Char): Bool = { c >= 'A' && c <= 'Z' }

/// Checks if a given character is an ASCII alphabetic or numeric character
def isAlphanumeric(c: Char): Bool = isDigit(c) || isLower(c) || isUpper(c)

/// Checks if a given character is an ASCII alphabetic character
def isAlphabetic(c: Char): Bool = isLower(c) || isUpper(c)
