/// Warning: This library currently only works with ASCII characters, **not** unicode!
module char

import exception


/// Checks if the given character is an ASCII whitespace
def isWhitespace(c: Char): Bool = c match {
  case ' '    => true
  case '\n'   => true
  case '\r'   => true
  case '\t'   => true
  case '\u0B' => true // vertical tab
  case '\u0C' => true // form feed
  case _      => false
}

/// Gets the value of a given ASCII digit in base 10
def digitValue(c: Char): Option[Int] =
  if (c >= '0' && c <= '9') {
    Some(c.toInt - '0'.toInt)
  } else {
    None()
  }

/// Gets the value of a given ASCII digit in base 16
def hexDigitValue(c: Char): Option[Int] =
  c match {
    case c and c >= '0' && c <= '9' => Some(c.toInt - '0'.toInt)
    case c and c >= 'A' && c <= 'F' => Some((c.toInt - 'A'.toInt) + 10)
    case c and c >= 'a' && c <= 'f' => Some((c.toInt - 'a'.toInt) + 10)
    case _ => None()
  }

/// Checks if the given character is an ASCII digit in base 10
/// Use `digitValue(c: Char)` to get the numeric value out.
def isDigit(c: Char): Bool = digitValue(c).isDefined

/// Checks if the given character is an ASCII digit in base 16
/// Use `hexDigitValue(c: Char)` to get the numeric value out.
def isHexDigit(c: Char): Bool = hexDigitValue(c).isDefined

/// Checks if a given character is a 7-bit ASCII character
def isASCII(c: Char): Bool = { c.toInt < 128 }

/// Checks if a given character is an ASCII lower alphabetic character
def isLower(c: Char): Bool = { c >= 'a' && c <= 'z' }

/// Checks if a given character is an ASCII upper alphabetic character
def isUpper(c: Char): Bool = { c >= 'A' && c <= 'Z' }

/// Checks if a given character is an ASCII alphabetic or numeric character
def isAlphanumeric(c: Char): Bool = isDigit(c) || isLower(c) || isUpper(c)

/// Checks if a given character is an ASCII alphabetic character
def isAlphabetic(c: Char): Bool = isLower(c) || isUpper(c)
