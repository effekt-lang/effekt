/// Warning: This library currently only works with ASCII characters, **not** unicode!
module char

import exception


/// Checks if the given character is an ASCII whitespace
def isWhitespace(c: Char): Bool = c match {
  case ' '    => true
  case '\n'   => true
  case '\r'   => true
  case '\t'   => true
  case '\u0B' => true // vertical tab
  case '\u0C' => true // form feed
  case _      => false
}

/// Gets the value of a given ASCII digit in base 10
def digitValue(char: Char): Option[Int] =
  // TODO use fail
  if (char >= '0' && char <= '9') {
    Some(char.toInt - '0'.toInt)
  } else {
    None()
  }

/// Gets the value of a given ASCII digit in base 16
def hexDigitValue(char: Char): Option[Int] =
  // TODO use fail
  char match {
    case char and char >= '0' && char <= '9' => Some(char.toInt - '0'.toInt)
    case char and char >= 'A' && char <= 'F' => Some((char.toInt - 'A'.toInt) + 10)
    case char and char >= 'a' && char <= 'f' => Some((char.toInt - 'a'.toInt) + 10)
    case _ => None()
  }

/// Gets the value of a given ASCII digit in the given base up to 36
def digitValue(char: Char, base: Int): Option[Int] = {
  // TODO use fail
  val perhapsDigit = char match {
      case char and char >= '0' && char <= '9' => Some(char.toInt - '0'.toInt)
      case char and char >= 'A' && char <= 'Z' => Some((char.toInt - 'A'.toInt) + 10)
      case char and char >= 'a' && char <= 'z' => Some((char.toInt - 'a'.toInt) + 10)
      case _ => None()
    }
  perhapsDigit match {
    case Some(digit) =>
      if (digit < base) {
        Some(digit)
      } else {
        None()
      }
    case None() => None()
  }
}

/// Checks if the given character is an ASCII digit in base 10
/// Use `digitValue(c: Char)` to get the numeric value out.
def isDigit(char: Char): Bool = digitValue(char).isDefined

/// Checks if the given character is an ASCII digit in base 16
/// Use `hexDigitValue(c: Char)` to get the numeric value out.
def isHexDigit(char: Char): Bool = hexDigitValue(char).isDefined

/// Checks if the given character is an ASCII digit in base 10
/// Use `digitValue(c: Char)` to get the numeric value out.
def isDigit(char: Char, base: Int): Bool = digitValue(char, base).isDefined

/// Checks if a given character is a 7-bit ASCII character
def isASCII(c: Char): Bool = { c.toInt < 128 }

/// Checks if a given character is an ASCII lower alphabetic character
def isLower(c: Char): Bool = { c >= 'a' && c <= 'z' }

/// Checks if a given character is an ASCII upper alphabetic character
def isUpper(c: Char): Bool = { c >= 'A' && c <= 'Z' }

/// Checks if a given character is an ASCII alphabetic or numeric character
def isAlphanumeric(c: Char): Bool = isDigit(c) || isLower(c) || isUpper(c)

/// Checks if a given character is an ASCII alphabetic character
def isAlphabetic(c: Char): Bool = isLower(c) || isUpper(c)
