module io

import ref
import queue

// Event Loop
// ----------

type Task[T] = () => T at {io, async, global}

extern llvm """
  declare void @c_yield(%Stack)
"""

extern async def spawn(task: Task[Unit]): Unit =
  js "$effekt.capture(k => { setTimeout(() => k($effekt.unit), 0); return $effekt.run(${task}) })"
  llvm """
    call void @c_yield(%Stack %stack)
    call void @run(%Neg ${task})
    ret void
  """

extern async def yield(): Unit =
  js "$effekt.capture(k => setTimeout(() => k($effekt.unit), 0))"
  llvm """
    call void @c_yield(%Stack %stack)
    ret void
  """

extern async def abort(): Nothing =
  js "$effekt.capture(k => undefined)"
  llvm """
    call void @eraseStack(%Stack %stack)
    ret void
  """


// Promises
// --------

extern type Promise[T]
  // = js "{resolve: Æ’, promise: Promise}"
  // = llvm "{tag: 0, obj: Promise*}"

def promise[T](task: Task[T]): Promise[T] = {
  val p = promise::make[T]();
  spawn(box { p.resolve(task()) });
  return p
}

extern llvm """
  declare %Pos @c_promise_make()
  declare void @c_promise_resolve(%Pos, %Pos)
  declare void @c_promise_await(%Pos, %Neg)
"""

extern async def await[T](promise: Promise[T]): T =
  js "$effekt.capture(k => ${promise}.promise.then(k))"
  llvm """
    call void @c_promise_await(%Pos ${promise}, %Stack %stack)
    ret void
  """

extern async def resolve[T](promise: Promise[T], value: T): Unit =
  js "$effekt.capture(k => { ${promise}.resolve(${value}); return k($effekt.unit) })"
  llvm """
    call void @c_promise_resolve(%Pos ${promise}, %Pos ${value}, %Stack %stack)
    ret void
  """

namespace promise {
  extern js """
    function promise$make() {
      let resolve;
      const promise = new Promise((res, rej) => {
        resolve = res;
      });
      return { resolve: resolve, promise: promise };
    }
  """

  extern io def make[T](): Promise[T] =
    js "promise$make()"
    llvm """
      %promise = call %Pos @c_promise_make()
      ret %Pos %promise
    """
}
