module io

import ref

// Event Loop
// ----------

type Task[T] = () => T at {io, async, global}

extern llvm """
  declare void @c_yield(%Stack)
"""

extern async def spawn(task: Task[Unit]): Unit =
  js "$effekt.capture(k => { setTimeout(() => k($effekt.unit), 0); return $effekt.run(${task}) })"
  llvm """
    call void @c_yield(%Stack %stack)
    %unboxed = call ccc %Neg @coercePosNeg(%Pos ${task})
    call void @run(%Neg %unboxed)
    ret void
  """

extern async def yield(): Unit =
  js "$effekt.capture(k => setTimeout(() => k($effekt.unit), 0))"
  llvm """
    call void @c_yield(%Stack %stack)
    ret void
  """

extern async def abort(): Nothing =
  js "$effekt.capture(k => undefined)"
  llvm """
    call void @eraseStack(%Stack %stack)
    ret void
  """
