module io/channel

// Channels
// --------

/// Must be sended exactly once and waited exactly once
extern type Channel[T]

namespace channel {
  extern global def allocate[T](): Channel[T] =
    llvm """
      %channel = call %Pos @c_channel_make()
      ret %Pos %channel
    """
}

extern global def send[T](channel: Channel[T], value: T): Unit =
  llvm """
    call void @c_channel_send(%Pos ${channel}, %Pos ${value})
    ret %Pos zeroinitializer
  """

extern async def wait[T](channel: Channel[T]): T =
  llvm """
    call void @c_channel_wait(%Pos ${channel}, %Stack %stack)
    ret void
  """

extern llvm """
  declare %Pos @c_channel_make()
  declare void @c_channel_send(%Pos, %Pos)
  declare void @c_channel_wait(%Pos, %Stack)
"""




