module io/console

import io

interface Console {
  def readLine(): String
  def writeLine(content: String): Unit
}

/// Handler for the console effect, using the Console available in js
def console[R] { program: () => R / Console }: R = {
  val c = js::newConsole()
  try {
    val r = program()
    js::close(c)
    return r
  } with Console {
    def readLine() = resume(js::readLine(c))
    def writeLine(message) = resume(js::writeLine(c, message))
  }
}

namespace js {

  extern jsNode """
    const readline = require('node:readline');
  """

  extern type JSConsole

  extern def newConsole() at io: JSConsole =
    jsNode """readline.createInterface({
        input: process.stdin,
        output: process.stdout,
      })"""

  extern def close(console: JSConsole) at io: Unit =
    jsNode "${console}.close()"

  extern def readLine(console: JSConsole) at async: String =
    jsNode "$effekt.capture(k => ${console}.once('line', k))"
  extern def writeLine(console: JSConsole, message: String) at io: Unit =
    jsNode "${console}.output.write(${message} + '\\n')"
}

namespace examples {

  def greeter() = {
    do writeLine("What's your name?")
    val name = do readLine();
    do writeLine("Hi " ++ name ++ ", nice to meet you!")
  }

  def main() = {
    with console;
    greeter()
  }

}
