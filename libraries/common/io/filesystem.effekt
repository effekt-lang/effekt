module io/filesystem

import bytearray

import io
import io/error


/// A file descriptor. Should not be inspected.
type File = Int


/// Reads a file at given path as utf8 encoded string.
def readFile(path: String): String / Exception[IOError] = {
  val file = openForReading(path);
  with on[IOError].finalize { close(file) }

  val chunkSize = 1048576 // 1MB
  var buffer = bytearray::allocate(chunkSize)
  var offset = 0

  def go(): String = {
    read(file, buffer, offset, chunkSize, -1) match {
      case 0 =>
        buffer.resize(offset).toString
      case n =>
        offset = offset + n
        if (offset + chunkSize > buffer.size) {
          buffer = buffer.resize(2 * buffer.size)
        }
        go()
    }
  }

  go()
}

/// Writes the (utf8 encoded) string `contents` into the specified file.
def writeFile(path: String, contents: String): Unit / Exception[IOError] = {
  val file = openForWriting(path);
  with on[IOError].finalize { close(file) }

  val chunkSize = 1048576 // 1MB
  val buffer = contents.fromString
  var offset = 0;

  def go(): Unit = {
    val n = write(file, buffer, offset, min(buffer.size - offset, chunkSize), -1)
    offset = offset + n
    if (offset < buffer.size) { go() }
  }

  go()
}

/// Appends the (utf8 encoded) string `contents` to the specified file.
def appendFile(path: String, contents: String): Unit / Exception[IOError] = {
  val file = openForAppending(path);
  with on[IOError].finalize { close(file) }

  val chunkSize = 1048576 // 1MB
  val buffer = contents.fromString
  var offset = 0;

  def go(): Unit = {
    val n = write(file, buffer, offset, min(buffer.size - offset, chunkSize), -1)
    offset = offset + n
    if (offset < buffer.size) { go() }
  }

  go()
}

/// An abstract interface applications can program against.
///
/// Can be interpreted with the `filesystem` handler, or virtualized etc.
///
/// See example below.
interface Files {
  def readFile(path: String): String
  def writeFile(path: String, contents: String): Unit
}

/// Using the file system via node.js
def filesystem[R] { program: => R / Files }: R / Exception[IOError] = // TODO move Exception to be bidirectional
  try { program() }
  with Files {
    def readFile(path) = resume(readFile(path))
    def writeFile(path, contents) = resume(writeFile(path, contents))
  }


def openForReading(path: String): File / Exception[IOError] =
  internal::checkResult(internal::openForReading(path))

def openForWriting(path: String): File / Exception[IOError] =
  internal::checkResult(internal::openForWriting(path))

def openForAppending(path: String): File / Exception[IOError] =
  internal::checkResult(internal::openForAppending(path))

def read(file: File, buffer: ByteArray, offset: Int, size: Int, position: Int): Int / Exception[IOError] =
  internal::checkResult(internal::read(file, buffer, offset, size, position))

def write(file: File, buffer: ByteArray, offset: Int, size: Int, position: Int): Int / Exception[IOError] =
  internal::checkResult(internal::write(file, buffer, offset, size, position))

def close(file: File): Unit / Exception[IOError] = {
  internal::checkResult(internal::close(file)); ()
}

namespace internal {

  extern js """
    /**
     * Nodejs file operations expect buffers, but we represent buffers as typed arrays.
     * This function converts between the two without copying.
     */
    function toBuffer(buffer) {
      return Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength)
    }
  """

  extern jsNode """
    const fs = require("fs");

    function open(path, flags, callback) {
      fs.open(path, flags, (err, file) => {
        if (err) { callback(err.errno) } else { callback(file) }
      })
    }

    function read(file, buffer, offset, size, position, callback) {
      let positionOrNull = position === -1 ? null : position;
      fs.read(file, toBuffer(buffer), offset, size, positionOrNull, (err, bytesRead) => {
        if (err) { callback(err.errno) } else { callback(bytesRead) }
      })
    }

    function write(file, buffer, offset, size, position, callback) {
      let positionOrNull = position === -1 ? null : position;
      fs.write(file, toBuffer(buffer), offset, size, positionOrNull, (err, bytesWritten) => {
        if (err) { callback(err.errno) } else { callback(bytesWritten) }
      })
    }

    function close(file, callback) {
      fs.close(file, (err) => {
        if (err) { callback(err.errno) } else { callback(0) }
      })
    }
  """

  extern llvm """
    declare void @c_fs_open_reading(%Pos, %Stack)
    declare void @c_fs_open_writing(%Pos, %Stack)
    declare void @c_fs_open_appending(%Pos, %Stack)
    declare void @c_fs_read(%Int, %Pos, %Int, %Int, %Int, %Stack)
    declare void @c_fs_write(%Int, %Pos, %Int, %Int, %Int, %Stack)
    declare void @c_fs_close(%Int, %Stack)
  """

  extern async def openForReading(path: String): Int =
    jsNode "$effekt.capture(callback => open(${path}, 'r', callback))"
    llvm """
      call void @c_fs_open_reading(%Pos ${path}, %Stack %stack)
      ret void
    """

  extern async def openForWriting(path: String): Int =
    jsNode "$effekt.capture(callback => open(${path}, 'w', callback))"
    llvm """
      call void @c_fs_open_writing(%Pos ${path}, %Stack %stack)
      ret void
    """

  extern async def openForAppending(path: String): Int =
    jsNode "$effekt.capture(callback => open(${path}, 'a', callback))"
    llvm """
      call void @c_fs_open_appending(%Pos ${path}, %Stack %stack)
      ret void
    """

  /// The buffer must be kept alive by using it after the call
  extern async def read(file: Int, buffer: ByteArray, offset: Int, size: Int, position: Int): Int =
    jsNode "$effekt.capture(callback => read(${file}, ${buffer}, ${offset}, ${size}, ${position}, callback))"
    llvm """
      call void @c_fs_read(%Int ${file}, %Pos ${buffer}, %Int ${offset}, %Int ${size}, %Int ${position}, %Stack %stack)
      ret void
    """

  /// The buffer must be kept alive by using it after the call
  extern async def write(file: Int, buffer: ByteArray, offset: Int, size: Int, position: Int): Int =
    jsNode "$effekt.capture(callback => write(${file}, ${buffer}, ${offset}, ${size}, ${position}, callback))"
    llvm """
      call void @c_fs_write(%Int ${file}, %Pos ${buffer}, %Int ${offset}, %Int ${size}, %Int ${position}, %Stack %stack)
      ret void
    """

  extern async def close(file: Int): Int =
    jsNode "$effekt.capture(callback => close(${file}, callback))"
    llvm """
      call void @c_fs_close(%Int ${file}, %Stack %stack)
      ret void
    """

  def checkResult(result: Int): Int / Exception[IOError] =
    if (result < 0) {
      val ioError = fromNumber(internal::errorNumber(result));
      do raise[IOError](ioError, message(ioError))
    } else {
      result
    }
}

namespace examples {

  // Example illustrating using abstract files interface
  // and interpreting it into asynchronous IO
  def copy(from: String, to: String): Unit / Files = {
    val contents = do readFile(from)
    do writeFile(to, contents)
  }

  def main() = {
    with on[IOError].panic;
    with filesystem;

    copy("README.md", "out/test.md")
  }
}
