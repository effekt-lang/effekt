module process
import array

extern def exit(errorCode: Int) at io: Nothing =
  js   "(function() { process.exit(${errorCode}) })()"
  llvm """
    call void @exit(i64 ${errorCode})
    ret %Pos zeroinitializer
  """
  chez "(exit ${errorCode})"

// Subprocesses
// ------------

extern jsNode """
const { spawn } = require('node:child_process');
"""
extern llvm """
  declare %Pos @c_spawn_options_default()
  declare %Pos @c_spawn_options_on_stdout(%Pos, %Pos)
  declare %Pos @c_spawn(%Pos, %Pos, %Pos)
"""

extern type SpawnOptions
extern def default() at {}: SpawnOptions =
  jsNode """{ stdio: [0,1,2], onSpawn: (p) => {} }"""
  llvm """
    %opts = call %Pos @c_spawn_options_default()
    ret %Pos %opts
  """
extern def onStdout(opts: SpawnOptions, callback: String => Unit at {io, global}) at {}: SpawnOptions =
  jsNode """(function() {
    let old = ${opts};
    old.stdio[1] = 'pipe';
    let oldSpawn = old.onSpawn;
    old.onSpawn = function(p) {
      oldSpawn(p);
      p.stdout.on('data', (chunk) => {
        $effekt.runToplevel((ks, k) => (${callback})(chunk, ks, k));
      });
    };
    return old; })()"""
  llvm """
    %opts = call %Pos @c_spawn_options_on_stdout(%Pos ${opts}, %Pos ${callback})
    ret %Pos %opts
  """

extern type PID
extern def spawn(cmd: String, args: Array[String], options: SpawnOptions): PID =
  jsNode """(function() {
      let p = spawn(${cmd}, ${args}, ${options});
      ${options}.onSpawn(p);
      return p;
    })()"""
  llvm """
    %proc = call %Pos @c_spawn(%Pos ${cmd}, %Pos ${args}, %Pos ${options})
    ret %Pos %proc
  """