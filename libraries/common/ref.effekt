module ref

import effekt

extern js """
  function set$impl(ref, value) {
    ref.value = value;
    return $effekt.unit;
  }
"""

extern llvm """
define void @c_ref_erase_field(ptr %0) {
  %field = load %Pos, ptr %0, align 8
  tail call void @erasePositive(%Pos %field)
  ret void
}
"""

/// Global, mutable references
extern type Ref[T]

/** We represent references like positive types in LLVM
 *  The tag is 0 and the obj points to memory with the following layout:
 *
 *   +--[ Header ]--------------+------------+
 *   | ReferenceCount  | Eraser | Field      |
 *   +--------------------------+------------+
 */

/// Allocates a new reference, keeping its value _undefined_.
/// Prefer using `ref` constructor instead to ensure that the value is defined.
extern global def allocate[T](): Ref[T] =
  js "{ value: undefined }"
  chez "(box #f)"
  llvm """
    ; sizeof Header + sizeof Pos = 32
    %ref = tail call noalias ptr @malloc(i64 noundef 32)
    %refEraser = getelementptr ptr, ptr %ref, i64 1
    %fieldTag = getelementptr ptr, ptr %ref, i64 2
    %fieldData_pointer = getelementptr ptr, ptr %ref, i64 3

    store i64 0, ptr %ref, align 8
    store ptr @c_ref_erase_field, ptr %refEraser, align 8
    store i64 0, ptr %fieldTag, align 8
    store ptr null, ptr %fieldData_pointer, align 8 

    %refWrap = insertvalue %Pos { i64 0, ptr poison }, ptr %ref, 1
    ret %Pos %refWrap
  """

/// Creates a new reference with the initial value `init`.
extern global def ref[T](init: T): Ref[T] =
  js "{ value: ${init} }"
  chez "(box ${init})"
  llvm """
    %initTag = extractvalue %Pos ${init}, 0
    %initObject_pointer = extractvalue %Pos ${init}, 1
    ; sizeof Header + sizeof Pos = 32
    %ref = tail call noalias ptr @malloc(i64 noundef 32)
    %refEraser = getelementptr ptr, ptr %ref, i64 1
    %refField = getelementptr ptr, ptr %ref, i64 2

    store i64 0, ptr %ref, align 8
    store ptr @c_ref_erase_field, ptr %refEraser, align 8
    store %Pos ${init}, ptr %refField, align 8

    %refWrap = insertvalue %Pos { i64 0, ptr poison }, ptr %ref, 1

    ret %Pos %refWrap
  """
  vm "ref::ref[T](T)"

/// Gets the referenced element of the `ref` in constant time.
extern global def get[T](ref: Ref[T]): T =
  js "${ref}.value"
  chez "(unbox ${ref})"
llvm """
    %ref_pointer = extractvalue %Pos ${ref}, 1
    %refField_pointer = getelementptr inbounds ptr, ptr %ref_pointer, i64 2
    %refField = load %Pos, ptr %refField_pointer, align 8

    tail call void @sharePositive(%Pos %refField)
    tail call void @erasePositive(%Pos ${ref})

    ret %Pos %refField
  """
  vm "ref::get[T](Ref[T])"

/// Sets the referenced element of the `ref` to `value` in constant time.
extern global def set[T](ref: Ref[T], value: T): Unit =
  js "set$impl(${ref}, ${value})"
  chez "(set-box! ${ref} ${value})"
  llvm """
    %refField_pointer = extractvalue %Pos ${ref}, 1

    %field_pointer = getelementptr ptr, ptr %refField_pointer, i64 2
    %field = load %Pos, ptr %field_pointer, align 8

    tail call void @erasePositive(%Pos %field)
    store %Pos ${value}, ptr %field_pointer
    tail call void @erasePositive(%Pos ${ref}) 

    ret %Pos zeroinitializer
  """
  vm "ref::set[T](Ref[T], T)"
