module resizable_array

import ref
import array

record ResizableArray[T](rawSizePtr: Ref[Int], rawContentPtr: Ref[Array[T]])

// These numbers should be optimized based on benchmarking
// According to https://en.wikipedia.org/wiki/Dynamic_array most use 1.5 or 2

/// Factor by which to grow the capacity when it becomes too small
val growFactor = 1.5
/// shrink array when size / capacity falls below this threshold
/// should be < 1/growFactor
val shrinkThreshold = 0.4

/// Number of elements in the dynamic array
///
/// O(1)
def size[T](arr: ResizableArray[T]) = arr.rawSizePtr.get

/// Allocate a new, empty dynamic array with given initial capacity
def resizableArray[T](capacity: Int): ResizableArray[T] = {
  ResizableArray(ref(0), ref(allocate(capacity)))
}

/// Allocate a new, empty dynamic array
def resizableArray[T](): ResizableArray[T] = resizableArray(8)

/// Throw an OutOfBounds exception if index is not a valid index into arr
def boundsCheck[T](arr: ResizableArray[T], index: Int): Unit / Exception[OutOfBounds] = {
  if (index < 0 || index >= arr.size) {
    do raise(OutOfBounds(), "Array index out of bounds: " ++ show(index))
  }
}

/// get the element at position index in the array
///
/// precondition: index is a valid index into the array
///
/// O(1)
def unsafeGet[T](arr: ResizableArray[T], index: Int): T = {
  arr.rawContentPtr.get.unsafeGet(index)
}
/// get the element at position index in the array
///
/// O(1)
def get[T](arr: ResizableArray[T], index: Int): T / Exception[OutOfBounds] = {
  arr.boundsCheck(index);
  arr.unsafeGet(index)
}

/// set the element at position index in the array
///
/// precondition: index is a valid index into the array
///
/// O(1)
def unsafeSet[T](arr: ResizableArray[T], index: Int, value: T): Unit = {
  arr.rawContentPtr.get.unsafeSet(index, value)
}

/// set the element at position index in the array
///
/// O(1)
def set[T](arr: ResizableArray[T], index: Int, value: T): Unit / Exception[OutOfBounds] = {
  arr.boundsCheck(index);
  arr.unsafeSet(index, value)
}

/// swap the elements at the given positions in the array
///
/// precondition: both are valid indices into the array
///
/// O(1)
def unsafeSwap[T](arr: ResizableArray[T], index1: Int, index2: Int): Unit = {
  val raw = arr.rawContentPtr.get
  val tmp = raw.unsafeGet(index1)
  raw.unsafeSet(index1, raw.unsafeGet(index2))
  raw.unsafeSet(index2, tmp)
}

/// swap the elements at the given positions in the array
///
/// O(1)
def swap[T](arr: ResizableArray[T], index1: Int, index2: Int): Unit / Exception[OutOfBounds] = {
  arr.boundsCheck(max(index1, index2))
  arr.unsafeSwap(index1, index2)
}

/// Change the dynamic to have exactly the given capacity
///
/// precondition: given capacity is at least the size of the array
///
/// O(n)
def unsafeSetCapacity[T](arr: ResizableArray[T], capacity: Int): Unit = {
  with on[OutOfBounds].panic
  val oldRaw = arr.rawContentPtr.get
  if (oldRaw.size != capacity) { 
    val newRaw = array::allocate(capacity)
    oldRaw.copy(0, newRaw, 0, arr.size)
    arr.rawContentPtr.set(newRaw)
  }
}

/// Change the resizable array to have exactly the given capacity.
/// This only changes the size of the backing array, not the `size`.
///
/// O(n)
def setCapacity[T](arr: ResizableArray[T], capacity: Int): Unit / Exception[OutOfBounds] = {
  if (arr.size > capacity) {
    do raise(OutOfBounds(), "Cannot change capacity of ResizableArray to " ++ capacity.show ++ " below size " ++ arr.size.show)
  }
  arr.unsafeSetCapacity(capacity)
}

/// If the shrinkThreshold is reached, shrink by growFactor, otherwise do nothing
///
/// O(n)
def maybeShrink[T](arr: ResizableArray[T]): Unit = {
  if(arr.size.toDouble < arr.rawContentPtr.get.size.toDouble * shrinkThreshold) {
    val newCap = max(arr.size, (arr.rawContentPtr.get.size.toDouble / growFactor).ceil)
    arr.unsafeSetCapacity(newCap)
  }
}

/// makes sure capacity is at least the given one
///
/// O(given capacity - current capacity) amortized, O(n) worst case // TODO ?
def ensureCapacity[T](arr: ResizableArray[T], capacity: Int): Unit / Exception[OutOfBounds] = {
  if (arr.rawContentPtr.get.size < capacity) {
    val curCapd: Double = arr.rawContentPtr.get.size.toDouble
    val minGrowCapacity: Int = (curCapd * growFactor + 1.0).toInt
    val newCapacity = max(capacity, minGrowCapacity)
    arr.setCapacity(newCapacity)
  }
}

/// Set the value at given position, resizing if necessary
/// Note: New elements might be uninitialized!!!
///
/// O(max(1,index - n)) amortized, O(n) worst case if index > capacity
def setResizing[T](arr: ResizableArray[T], index: Int, value: T): Unit / Exception[OutOfBounds] = {
  if (index < 0) {
    do raise(OutOfBounds(), "Negative index " ++ index.show)
  }
  if (index < arr.size) {
    arr.rawContentPtr.get.unsafeSet(index, value)
  }
  ensureCapacity(arr, index + 1)
  arr.rawContentPtr.get.unsafeSet(index, value)
  arr.rawSizePtr.set(index + 1)
}

/// Add a new element at the end of the resizable array.
/// Return the index of the new element
///
/// O(1) amortized, O(n) worst case
def add[T](arr: ResizableArray[T], value: T): Int = {
  with on[OutOfBounds].panic();
  val idx = arr.size
  arr.setResizing(idx, value)
  idx
}

/// Remove and return the rightmost element in the resizable array.
///
/// O(1) amortized, O(n) worst case
def popRight[T](arr: ResizableArray[T]): T / Exception[OutOfBounds] = {
  arr.boundsCheck(arr.size - 1)
  arr.rawSizePtr.set(arr.size - 1)
  val r = arr.unsafeGet(arr.size)
  arr.maybeShrink()
  r
}


def foreachIndex[T](arr: ResizableArray[T]){ body: (Int, T) => Unit }: Unit = {
  each(0, arr.size) { i =>
    body(i, arr.rawContentPtr.get.unsafeGet(i))
  }
}
def foreachIndex[T](arr: ResizableArray[T]){ body: (Int, T) {Control} => Unit }: Unit = {
  each(0, arr.size) { (i){label} =>
    body(i, arr.rawContentPtr.get.unsafeGet(i)){label}
  }
}
def foreach[T](arr: ResizableArray[T]){ body: T => Unit }: Unit = {
  each(0, arr.size) { i =>
    body(arr.rawContentPtr.get.unsafeGet(i))
  }
}
def foreach[T](arr: ResizableArray[T]){ body: (T) {Control} => Unit }: Unit = {
  each(0, arr.size) { (i){label} =>
    body(arr.rawContentPtr.get.unsafeGet(i)){label}
  }
}
def foreachIndexReversed[T](arr: ResizableArray[T]){ body: (Int, T){Control} => Unit }: Unit = {
  var i = arr.size - 1
  loop { {l} =>
    if (i < 0) { l.break() }
    body(i, arr.rawContentPtr.get.unsafeGet(i)){l}
    i = i - 1
  }
}
def foreachIndexReversed[T](arr: ResizableArray[T]){ body: (Int, T) => Unit }: Unit = {
  var i = arr.size - 1
  while(i >= 0) {
    body(i, arr.rawContentPtr.get.unsafeGet(i))
    i = i - 1
  }
}
def foreachReversed[T](arr: ResizableArray[T]){ body: (T){Control} => Unit }: Unit = {
  var i = arr.size - 1
  loop { {l} =>
    if (i < 0) { l.break() }
    body(arr.rawContentPtr.get.unsafeGet(i)){l}
    i = i - 1
  }
}
def foreachReversed[T](arr: ResizableArray[T]){ body: T => Unit }: Unit = {
  var i = arr.size - 1
  while (i >= 0) { 
    body(arr.rawContentPtr.get.unsafeGet(i))
    i = i - 1
  }
}

def toList[T](arr: ResizableArray[T]): List[T] = {
  def go(i: Int, acc: List[T]): List[T] = {
    if (i < 0) { acc } else {
      go(i - 1, Cons(arr.unsafeGet(i), acc))
    }
  }
  go(arr.size - 1, Nil())
}