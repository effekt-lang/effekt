module scanner

import char
import stream

interface Scan[A] {
  /// Return the next character, not advancing.
  /// That is, this does not change what any future calls on the Scanner return.
  def peek(): A / stop
  /// Advance the Scanner to the next character.
  def skip(): Unit
}

/// Advance the Scanner to the next character, returning it.
def read[A](): A / { Scan[A], stop } = {
  val t = do peek[A]()
  do skip[A]()
  return t
}

/// Run a scanner by reading from an input stream.
def scanner[A, R] { scanner: () => R / Scan[A] }: R / read[A] = {
  var last = None()
  try {
    scanner()
  } with Scan[A] {
    def peek() = resume {
      last match {
        case None() =>
          val t = do read[A]()
          last = Some(t)
          return t
        case Some(t) =>
          return t
      }
    }
    def skip() = {
      last match {
        case None() =>
          val _ = do read[A]()
          resume(())
        case Some(t) =>
          last = None()
          resume(())
      }
    }
  }
}



/// Check that the next token satisfies the predicate and skip and return it when it does.
def readIf[A] { predicate: A => Bool }: Option[A] / Scan[A] =
  try {
    val t = do peek[A]()
    if (predicate(t)) {
      do skip[A]()
      Some(t)
    } else {
      None()
    }
  } with stop {
    None()
  }

/// Check that the next token satisfies the predicate and skip it when it does.
def skipIf[A] { predicate: A => Bool }: Unit / Scan[A] = {
  readIf{predicate}
  ()
}

/// Reads until the predicate does not hold for the next token.
/// Emits the tokens read.
def readWhile[A] { predicate: A => Bool }: Unit / { Scan[A], emit[A] } =
  exhaustively {
    val c = do peek[A]()
    if (predicate(c)) {
      do skip[A]()
      do emit(c)
    } else {
      do stop()
    }
  }

/// Skips until the predicate does not hold for the next token.
def skipWhile[A] { predicate: A => Bool }: Unit / Scan[A] =
  try {
    readWhile{predicate}
  } with emit[A] { _ =>
    resume(())
  }


/// Read the next character if it is the given one and return true in this case.
def readIf(e: Char): Bool / Scan[Char] =
  readIf { c => c == e}.isDefined

/// Check that the next token satisfies the predicate and skip it when it does.
def skipIf(e: Char): Unit / Scan[Char] =
  skipIf { c => c == e }

/// Skip until the next character is not a whitespace character
def skipWhitespace(): Unit / Scan[Char] =
  skipWhile { c => c.isWhitespace }


def prettyUnexpectedChar(got: Char, expected: Char): String =
  "Unexpected character, got '" ++ got.toString ++ "', but expected '" ++ expected.toString ++ "'"

def unexpectedChar(got: Char, expected: Char): Nothing / Exception[WrongFormat] =
  wrongFormat(prettyUnexpectedChar(got, expected))

/// Require that the next character is the given one, raising an exception otherwise.
def expect(c: Char): Unit / { Scan[Char], Exception[WrongFormat] } = {
  try {
    val t = read[Char]()
    if (t != c) {
      unexpectedChar(t, c)
    }
  } with stop {
    wrongFormat("Unexpected end of input")
  }
}

/// Check that the next characters are the given String, raising an exception otherwise.
/// Advances over the longest common prefix with this String.
def expect(s: String): Unit / { Scan[Char], Exception[WrongFormat] } =
  for[Char] { s.each } { c => expect(c) }


/// Check that the next character is a digit, and if so read and return it.
def readDigit(base: Int): Option[Int] / Scan[Char] =
  try {
    val d = digitValue(do peek(), base)
    do skip[Char]()
    Some(d)
  } with stop {
    None()
  } with Exception[WrongFormat] {
    def raise(_, _) = None()
  }


/// Read a positive integer in the given base <= 35.
def readPositive(base: Int): Int / { Scan[Char], Exception[WrongFormat] } = {

  var result = readDigit(base).getOrElse {
    wrongFormat("Positive number should start with a digit")
  }

  while(readDigit(base) is Some(digit)) {
    result = result * base + digit
  }

  result
}

/// Read a positive decimal integer.
def readPositive(): Int / { Scan[Char], Exception[WrongFormat] } =
  readPositive(10)

/// Read an integer in the given base <= 35.
def readInteger(base: Int): Int / { Scan[Char], Exception[WrongFormat] } = {
  if (readIf('-')) {
    neg(readPositive(base))
  } else {
    readPositive(base)
  }
}

/// Read a decimal integer.
def readInteger(): Int / { Scan[Char], Exception[WrongFormat] } =
  readInteger(10)

/// Read a double value, in the common format (TODO document)
def readDouble(): Double / { Scan[Char], Exception[WrongFormat] } = {
  def exponent(pre: Double) = {
    try {
      if(do peek() == 'e' || do peek() == 'E') {
        do skip[Char]()
        val e = do peek[Char]() match {
          case '+' => do skip[Char](); readPositive()
          case '-' => do skip[Char](); neg(readPositive())
          case _ => readPositive()
        }
        pre * pow(10.0, e)
      } else { pre }
    } with stop {
      pre
    }
  }
  def fraction(pre: Int) = {
    if (readIf('.')) {
      var b = 0.1
      var r = pre.toDouble
      while (readDigit(10)is Some(d)) {
        r = r + b * d.toDouble
        b = b * 0.1
      }
      exponent(r)
    } else {
      pre.toDouble
    }
  }
  fraction(readInteger())
}

/// Read and unescape a string in ""
def readQuotedString(): Unit / { Scan[Char], emit[Char], Exception[WrongFormat] } = {
  try {
    skipWhitespace()
    expect('"')
    while(read[Char]() is c and c != '"') {
      c match {
        case '\\' => read[Char]() match {
          case '"' => do emit('\"')
          case '\\' => do emit('\\')
          case '/' => do emit('/')
          case 'b' => <>
          case 'f' => <>
          case 'n' => do emit('\n')
          case 'r' => do emit('\r')
          case 't' => do emit('\t')
          case c => wrongFormat("Invalid escape sequence '\\" ++ c.toString ++ "'")
        }
        case o => do emit(o)
      }
    }
  } with stop {
    wrongFormat("Unexpected end of input while reading a string")
  }
}



namespace test {
  def main() = {
    with on[WrongFormat].panic
  
    val input =
      """
      12
      32.3e-1
      "\ta\n\ra"
      """

    with feed(input)
    with scanner[Char, Unit]

    skipWhitespace()
    println(readInteger().show)
    skipWhitespace()
    println(readDouble().show)
    skipWhitespace()
    println(collectString { readQuotedString() })
  }
}