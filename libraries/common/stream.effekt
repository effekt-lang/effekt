module stream

import effekt
import option

// Effects
// -------

/// Describes push streams by emitting values of type `A`.
effect emit[A](value: A): Unit

/// Describes pull streams by reading values of type `A`.
///
/// The producer can decide to `stop` emitting values.
effect read[A](): A / stop

/// Signal from a producer to a consumer that there are no further values.
effect stop(): Nothing

/// Like `for[A, R]`, but ignores the result of the stream, and consequently
/// works for any type. Use this to annotate the type of stream elements
/// `A` without having to also annotate `R`.
///
/// e.g. for[Int] { prog() } { el => println(el) }
def for[A] { stream: () => Unit / emit[A] } { action: A => Unit }: Unit =
  returning::for[A, Unit]{stream}{action}

/// Applies the given function on each emitted element and reemits the result.
///
/// e.g. map[Int,String]{ x => x.show } { range(0, 5) }
def map[A, B] { function: A => B } { stream: () => Unit / emit[A] }: Unit / emit[B] =
  returning::map[A, B, Unit]{function}{stream}

/// Runs the given action whenever the given reader reads an element.
///
/// e.g. var i = -1; with tap { i = i + 1; i }; reader()
def tap[A] { action: () => A / stop } { reader: () => Unit / read[A] }: Unit =
  returning::tap[A, Unit]{action}{reader}

/// Runs the stream as a message queue,
/// handling each of its elements that can produce new elements ("messages"),
/// until a fixed point is reached.
def fix[T] { one: T => Unit / emit[T] } { stream: => Unit / emit[T] }: Unit =
  try {
    stream()
  } with emit[T] { value =>
    fix[T] {one} { one(value) }
    resume(())
  }


def boundary { program: () => Unit / stop }: Unit = {
  returning::boundary[Unit]{program}
  ()
}

/// Run `program` forever until `stop` is thrown.
def exhaustively { program: () => Unit / stop }: Unit =
  try {
    def go(): Unit = {
      program()
      go()
    }
    go()
  } with stop {
    ()
  }

def many[A] { action: () => A / stop }: Unit / emit[A] =
  exhaustively { do emit(action()) }

def some[A] { action: () => A / stop }: Unit / { emit[A], stop } = {
  do emit(action())
  many { action() }
}

def optionally { program: () => Unit / stop }: Bool =
  returning::optionally[Unit]{program}.isDefined

def attempt[R] { program: () => R / stop } { fallback: () => R }: R =
  try {
    program()
  } with stop {
    fallback()
  }


/// In Effekt lower bounds are inclusive and upper bounds are exclusive
record Indexed[A](index: Int, value: A)

def range(lower: Int, upper: Int): Unit / emit[Int] =
  if (lower < upper) {
    do emit(lower)
    range(lower + 1, upper)
  }

def rangeTo(upper: Int): Unit / emit[Int] =
  range(0, upper)

def rangeFrom(lower: Int): Unit / emit[Int] = {
  do emit(lower)
  rangeFrom(lower + 1)
}

def index[A] { stream: () => Unit / emit[A] }: Unit / emit[Indexed[A]] =
  returning::index[A, Unit]{stream}


/// If `number` is zero or negative it does nothing
def limit[A](number: Int) { stream: () => Unit / emit[A] }: Unit / emit[A] =
  boundary { returning::limit[A, Unit](number){stream} }


/// If `number` is zero or negative it does nothing
def replicate[A](number: Int) { action: () => A }: Unit / emit[A] =
  if (number > 0) {
    do emit(action())
    replicate(number - 1) {action}
  }

/// Creates an infinite iterated stream given by an `initial` seed and a `step` function:
/// iterate(a){f} ~> a, f(a), f(f(a)), f(f(f(a))), ...
def iterate[A](initial: A) { step: A => A }: Unit / emit[A] = {
  var current = initial
  while (true) {
    do emit(current)
    current = step(current)
  }
}


def sum { stream: () => Unit / emit[Int] }: Int =
  returning::sum[Unit]{stream}.second

def product { stream: () => Unit / emit[Int] }: Int =
  returning::product[Unit]{stream}.second

def source[A] { stream: () => Unit / emit[A] } { reader: () => Unit / read[A] }: Unit =
  returning::source[A, Unit]{stream}{reader}

/// Combines two streams together calling action on pairs in lockstep.
/// Terminates when either of them terminates.
def zip[A, B] { stream1: () => Unit / emit[A] } { stream2: () => Unit / emit[B] } { action: (A, B) => Unit }: Unit = {
  with source[A] { stream1 }
  with source[B] { stream2 }

  exhaustively {
    action(do read[A](), do read[B]())
  }
}

/// Combines two streams together calling action on OneOrBoth in lockstep.
/// Terminates when both of them terminated.
def zipLongest[A, B] { stream1: () => Unit / emit[A] } { stream2: () => Unit / emit[B] } { action: OneOrBoth[A, B] => Unit }: Unit = {
  with source[A] { stream1 }
  with source[B] { stream2 }

  exhaustively {
     try {
      val a = do read[A]()
      try {
        val b = do read[B]()
        action(Both(a, b))
      } with stop { () =>
        action(This(a))
      }
    } with stop{ () =>
      val b = do read[B]()
      action(That(b))
    }
  }
}

namespace internal {
  effect snapshot(): Unit
}

/// Use cons to handle prod, but also emit to the outside.
/// The outside controls iteration, i.e., if cons aborts, the rest of prod will still be emitted.
/// 
/// Starts by executing cons. Will stop cons during execution if the outside stops consuming.
/// 
/// Example, printing all values consumed by the outside:
///
///     with teeing{ {s} => for{s}{ e => println(e) } }
///     prod() // some producer
///
/// Laws-ish (hopefully):
/// - hnd{ prd() } === hnd{ teeing{t}{ prd() } } for all hnd and t that calls its argument at most once (and has no other captures)
def teeing[A]{ cons: { => Unit / emit[A] } => Unit }{ prod: => Unit / emit[A] }: Unit / emit[A] = region r {
  var consDone = false
  var k in r = box { prod() } // what still needs to run of prod after cons exits
  try {
    cons{
      try {
        prod()
        k = box { () }
      } with emit[A] { v =>
        do internal::snapshot() // remember that we need to continue here if cons aborts
        if(not(consDone)) do emit(v)
        outer.emit(v)
        resume(())
      }
      if(consDone) do stop() // cons already exited, so skip continuing there
    } // end cons
    consDone = true
  }
  with stop { () => () }
  with outer: emit[A]{ v => resume(do emit(v)) }
  with internal::snapshot{ () =>
    k = box { resume(()) }
    resume(())
  }
  k()
}

/// Binds a `teeing`-like function in the body, stopping the inner producer once all consumers in tees are done consuming.
/// 
/// Example of use, equivalent to `tee[A]{cns1}{cns2}{prd}`:
/// 
///     manyTee[A] { {tee} =>
///       with tee{cns1}
///       with tee{cns2}
///       prd()
///     }
///
def manyTee[A]{ body: { { { => Unit / emit[A] } => Unit }{ => Unit / emit[A] } => Unit / emit[A] } => Unit / emit[A] }: Unit = {
  var running = 0
  try {
    body{ {hnd}{prod} =>
      running = running + 1
      teeing[A]{ {b} => hnd{b}; running = running - 1 }{prod}
    }
  } with emit[A] { _ =>
    if(running > 0) resume(())
  }
}

/// Streams prod to both cons1 and cons2. Stops once both cons1 and cons2 stopped.
/// Only runs prod once, resuming at most once at each emit.
///
///     var sumRes = 0
///     var productRes = 0
///     tee{ s => sumRes = sum{s} }{ s => productRes = product{s} }{ range(0, 10) }
///     assertEquals(sum{ range(0, 10) }, sumRes)
///     assertEquals(product{ range(0, 10) }, productRes)
///
def tee[A]{ cons1: { => Unit / emit[A] } => Unit }{ cons2: { => Unit / emit[A] } => Unit }{ prod: => Unit / emit[A] }: Unit = {
  manyTee[A]{ {tee} =>
    with tee{cons1}
    with tee{cons2}
    prod()
  }
}

namespace returning {

/// Canonical handler of push streams that performs `action` for every
/// value emitted by `stream`.
def for[A, R] { stream: () => R / emit[A] } { action: A => Unit }: R =
  try {
    stream()
  } with emit[A] { value =>
    resume(action(value))
  }

def map[A, B, R] { function: A => B } { stream: () => R / emit[A] }: R / emit[B] =
  try {
    stream()
  } with emit[A] { value =>
    resume(do emit(function(value)))
  }

def tap[A, R] { action: () => A / stop } { reader: () => R / read[A] }: R =
  try {
    reader()
  } with read[A] { () =>
    resume { action() }
  }

def boundary[R] { program: () => R / stop }: Option[R] =
  try {
    Some(program())
  } with stop {
    None()
  }

def optionally[R] { program: () => R / stop }: Option[R] =
  try {
    Some(program())
  } with stop {
    None()
  }

def index[A, R] { stream: () => R / emit[A] }: R / emit[Indexed[A]] = {
  var i = 0;
  try {
    stream()
  } with emit[A] { v =>
    val c = i;
    i = c + 1;
    resume(do emit(Indexed(c, v)))
  }
}

/// If `number` is zero or negative it does nothing
def limit[A, R](number: Int) { stream: () => R / emit[A] }: R / { emit[A], stop } = {
  if (number > 0) {
    var i = number;
    try {
      stream()
    } with emit[A] { v =>
      do emit(v);
      i = i - 1;
      if (i > 0) {
        resume(())
      } else {
        do stop()
      }
    }
  } else {
    do stop()
  }
}

def sum[R] { stream: () => R / emit[Int] }: (R, Int) = {
  var s = 0;
  try {
    (stream(), s)
  } with emit[Int] { v =>
    s = s + v;
    resume(())
  }
}

def product[R] { stream: () => R / emit[Int] }: (R, Int) = {
  var s = 1;
  try {
    (stream(), s)
  } with emit[Int] { v =>
    s = s * v;
    resume(())
  }
}

def source[A, R] { stream: () => Unit / emit[A] } { reader: () => R / read[A] }: R = {
  var next = box { None() }
  next = box {
    try {
      stream()
      next = box { None() }
      None()
    } with emit[A] { (v) =>
      next = box { resume(()) }
      Some(v)
    }
  }
  try {
    reader()
  } with read[A] {
    resume {
      next().getOrElse { do stop() }
    }
  }
}

}
