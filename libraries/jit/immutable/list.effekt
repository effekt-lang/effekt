module immutable/list

import effekt
import immutable/option

record EmptyList()

type List[A] {
  Nil();
  Cons(head: A, tail: List[A])
}

def foreach[A](l: List[A]) { f: A => Unit } : Unit = l match {
  case Nil() => ()
  case Cons(x, xs) => f(x); xs.foreach{f}
}

def map[A, B](l: List[A]) { f: A => B } : List[B] = {
  var acc = Nil[B]()
  l.foreach { el => acc = Cons(f(el), acc) }
  acc.reverse
}

def size[A](l: List[A]): Int = {
  var n = 0;
  l.foreach { _ => n = n + 1 };
  n
}

def reverse[A](l: List[A]): List[A] = l.reverseOnto(Nil[A]())

// [1,2,3].reverseOnto([4,5,6])
// [3,2,1,4,5,6]
def reverseOnto[A](l: List[A], other: List[A]): List[A] = l match {
  case Nil() => other
  case Cons(a, rest) => rest.reverseOnto(Cons(a, other))
}

// [1,2,3].append([4,5,6])
// [3,2,1].reverseOnto([4,5,6])
// [1,2,3,4,5,6]
def append[A](l: List[A], other: List[A]): List[A] =
  l.reverse.reverseOnto(other)

// gracefully fails
def take[A](l: List[A], n: Int): List[A] =
  if (n == 0) {
    Nil()
  } else l match {
    case Nil() => Nil()
    case Cons(a, rest) => Cons(a, rest.take(n - 1))
  }

def drop[A](l: List[A], n: Int): List[A] =
  if (n == 0) {
    l
  } else l match {
    case Nil() => Nil()
    case Cons(a, rest) => rest.drop(n - 1)
  }

def isEmpty[A](l: List[A]): Boolean = l match {
  case Nil() => true
  case Cons(a, rest) => false
}

def nonEmpty[A](l: List[A]): Boolean = l match {
  case Nil() => false
  case Cons(a, rest) => true
}

def head[A](l: List[A]): A / Exception[EmptyList] = l match {
  case Nil() => do raise(EmptyList(), "Trying to get the head of an empty list")
  case Cons(a, rest) => a
}

def tail[A](l: List[A]): List[A] / Exception[EmptyList] = l match {
  case Nil() => do raise(EmptyList(), "Trying to get the head of an empty list")
  case Cons(a, rest) => rest
}

def headOption[A](l: List[A]): Option[A] = l match {
  case Nil() => None()
  case Cons(a, rest) => Some(a)
}

// elements that satisfy the predicate go into the left list
def partition[A](l: List[A]) { pred: A => Boolean }: (List[A], List[A]) = {
  var lefts: List[A] = Nil()
  var rights: List[A] = Nil()
  l.foreach { el =>
    if (pred(el)) { lefts = Cons(el, lefts) }
    else { rights = Cons(el, rights) }
  };

  (lefts.reverse, rights.reverse)
}

// this implementation is not stacksafe!
def sortBy[A](l: List[A]) { compare: (A, A) => Boolean }: List[A] =
  l match {
    case Nil() => Nil()
    case Cons(pivot, rest) =>
      val (lt, gt) = rest.partition { el => compare(el, pivot) };
      val leftSorted = sortBy(lt) { (a, b) => compare(a, b) }
      val rightSorted = sortBy(gt) { (a, b) => compare(a, b) }
      leftSorted.append(Cons(pivot, rightSorted))
  }

def sort(l: List[Int]): List[Int] = l.sortBy { (a, b) => a < b }
def sort(l: List[Double]): List[Double] = l.sortBy { (a, b) => a < b }

// for now define some common cases; TODO better solution
def showList[A](l: List[A]){ showA: A => String }: String = {
  def rec(l: List[A]): String = l match {
    case Nil() => "]"
    case Cons(hd, tl) => ", " ++ showA(hd) ++ rec(tl)
  }
  l match {
    case Nil() => "[]"
    case Cons(hd, tl) => "[" ++ showA(hd) ++ rec(tl)
  }
}
def show(l: List[Int]): String = showList(l){ v => show(v) }
def show(l: List[Double]): String = showList(l){ v => show(v) }
def show(l: List[Boolean]): String = showList(l){ v => show(v) }
def show(l: List[String]): String = showList(l){ v => v }
def println(l: List[Int]): Unit = println(show(l))
def println(l: List[Double]): Unit = println(show(l))
def println(l: List[Boolean]): Unit = println(show(l))
def println(l: List[String]): Unit = println(show(l))