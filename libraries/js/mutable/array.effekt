module mutable/array

import immutable/option
import immutable/list

// A mutable array, backed by a JavaScript array.
extern type Array[T]

def emptyArray[T](): Array[T] = emptyArray(0)

//initialize array with default values
def arrayFromValue[T](size: Int, default: T) : Array[T] = {
  val arr = emptyArray[T](size)
  each(0,arr.size()){ i=> put(arr, i, default)}
  return arr;
}

def arrayFromLoop[T](size: Int) { index: Int => T}: Array[T] = {
  val arr = emptyArray[T](size)
  each(0,arr.size()){ i=> put(arr, i, index(i))}
  return arr
}

def arrayFromList[T](list: List[T]): Array[T] = {
  val listSize = list.size();
  val arr = emptyArray(listSize);

  foreachIndex(list){(i, head) => put(arr, i, head)}
  return arr;
}



extern pure def emptyArray[T](initialSize: Int): Array[T] =
  "(new Array(initialSize))"

def get[T](arr: Array[T], index: Int): Option[T] =
  arr.unsafeGet(index).undefinedToOption

extern pure def size[T](arr: Array[T]): Int =
  "arr.length"

extern io def unsafeGet[T](arr: Array[T], index: Int): T =
  "arr[index]"

extern io def put[T](arr: Array[T], index: Int, value: T): Unit =
  "(function() { arr[index] = value; return $effekt.unit })()"

extern pure def copy[T](arr: Array[T]): Array[T] =
  "[...arr]"

def toList[T](arr: Array[T]): List[T] = {
  var i = arr.size - 1;
  var l = Nil[T]()
  while (i > 0) {
    l = Cons(unsafeGet(arr, i), l)
    i = i - 1
  }
  l
}
