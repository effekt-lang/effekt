// Based on libraries\js\monadic\effekt.effekt

module effekt

extern include ml "effekt.ml"

def locally[R] { f: => R }: R = f()

// Side effecting ops
// ==================
def println(value: Int): Unit = println(value.show)
def println(value: Unit): Unit = println(value.show)
def println(value: Double): Unit = println(value.show)
def println(value: Bool): Unit = println(value.show)

def println(value: String): Unit = print(value ++ "\n")
extern io def print(value: String): Unit = ml "print_string ${value}"

extern io def random(): Double =
  ml "Random.float 1.0"

// TODO: js is absolute, but that is too big for 32-bit ints
extern io def timestamp(): Int =
  ml "int_of_float ((Unix.gettimeofday ()) *. 1000.0)"

// String ops
// ==========
extern pure def show(value: Int): String =
  ml "string_of_int ${value}"
def show(value: Unit): String = "()"
extern pure def show(value: Double): String =
  ml "show_float ${value}"
def show(value: String): String = value
extern pure def show(value: Bool): String =
  ml "string_of_bool ${value}"

extern pure def infixConcat(s1: String, s2: String): String =
  ml "${s1} ^ ${s2}"

// Math ops
// ========
extern pure def infixAdd(x: Int, y: Int): Int =
  ml "${x} + ${y}"

extern pure def infixMul(x: Int, y: Int): Int =
  ml "${x} * ${y}"

extern pure def infixDiv(x: Int, y: Int): Int =
  ml "${x} / ${y}"

extern pure def infixSub(x: Int, y: Int): Int =
  ml "${x} - ${y}"

extern pure def mod(x: Int, y: Int): Int =
  ml "${x} mod ${y}"

extern pure def infixAdd(x: Double, y: Double): Double =
  ml "${x} +. ${y}"

extern pure def infixMul(x: Double, y: Double): Double =
  ml "${x} *. ${y}"

extern pure def infixSub(x: Double, y: Double): Double =
  ml "${x} -. ${y}"

extern pure def infixDiv(x: Double, y: Double): Double =
  ml "${x} /. ${y}"

def min(n: Int, m: Int): Int =
    if (n < m) n else m

def max(n: Int, m: Int): Int =
    if (n > m) n else m

// trig
// ====
extern pure def cos(x: Double): Double =
  ml "cos ${x}"

extern pure def sin(x: Double): Double =
  ml "sin ${x}"

extern pure def atan(x: Double): Double =
  ml "atan ${x}"

extern pure def tan(x: Double): Double =
  ml "tan ${x}"

extern pure def sqrt(x: Double): Double =
  ml "sqrt ${x}"

extern pure def square(x: Double): Double =
  ml "${x} *. ${x}"

extern pure def log(x: Double): Double =
  ml "log ${x}"

extern pure def log1p(x: Double): Double =
  ml "log1p ${x}"

extern pure def exp(x: Double): Double =
  ml "exp ${x}"

// since we do not have "extern val", yet
extern pure def _pi(): Double =
  ml "Float.pi"

val PI: Double = _pi()

extern pure def toInt(d: Double): Int =
  ml "int_of_float (floor (${d} +. 0.5))"

extern pure def toDouble(d: Int): Double =
  ml "float_of_int ${d}"

extern pure def floor(d: Double): Int =
  ml "int_of_float (floor ${d})"

extern pure def ceil(d: Double): Int =
  ml "int_of_float (ceil ${d})"


// Comparison ops
// ==============
extern pure def infixEq[R](x: R, y: R): Bool =
  ml "${x} = ${y}"

extern pure def infixNeq[R](x: R, y: R): Bool =
  ml "not (${x} = ${y})"

extern pure def infixLt(x: Int, y: Int): Bool =
  ml "(${x}: int) < ${y}"

extern pure def infixLte(x: Int, y: Int): Bool =
  ml "(${x}: int) <= ${y}"

extern pure def infixGt(x: Int, y: Int): Bool =
  ml "(${x}: int) > ${y}"

extern pure def infixGte(x: Int, y: Int): Bool =
  ml "(${x}: int) >= ${y}"

extern pure def infixLt(x: Double, y: Double): Bool =
  ml "(${x}: float) < ${y}"

extern pure def infixLte(x: Double, y: Double): Bool =
  ml "(${x}: float) <= ${y}"

extern pure def infixGt(x: Double, y: Double): Bool =
  ml "(${x}: float) > ${y}"

extern pure def infixGte(x: Double, y: Double): Bool =
  ml "(${x}: float) >= ${y}"

extern pure def infixLt(x: String, y: String): Bool =
  ml "(${x}: string) < ${y}"

extern pure def infixLte(x: String, y: String): Bool =
  ml "(${x}: string) <= ${y}"

extern pure def infixGt(x: String, y: String): Bool =
  ml "(${x}: string) > ${y}"

extern pure def infixGte(x: String, y: String): Bool =
  ml "(${x}: string) >= ${y}"

// Bool ops
// ===========
extern pure def not(b: Bool): Bool =
  ml "not ${b}"

def infixOr { first: => Bool } { second: => Bool }: Bool =
  if (first()) true else second()

def infixAnd { first: => Bool } { second: => Bool }: Bool =
  if (first()) second() else false

// Pairs
// =====
record Tuple2[A, B](first: A, second: B)
record Tuple3[A, B, C](first: A, second: B, third: C)
record Tuple4[A, B, C, D](first: A, second: B, third: C, fourth: D)
record Tuple5[A, B, C, D, E](first: A, second: B, third: C, fourth: D, fifth: E)
record Tuple6[A, B, C, D, E, F](first: A, second: B, third: C, fourth: D, fifth: E, sixth: F)

// Exceptions
// ==========
// a fatal runtime error that cannot be caught
extern io def panic[R](msg: String): R =
  ml "raise Fail ${msg}"

interface Exception[E] {
  def raise(exception: E, msg: String): Nothing
}
record RuntimeError()

def raise[A](msg: String): A / Exception[RuntimeError] = do raise(RuntimeError(), msg) match {}
def raise[A, E](exception: E, msg: String): A / Exception[E] = do raise(exception, msg) match {}

// converts exceptions of (static) type E to an uncatchable panic that aborts the program
def panicOn[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = panic(msg) }

// reports exceptions of (static) type E to the console
def report[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = println(msg) }

// ignores exceptions of (static) type E
// TODO this should be called "ignore" but that name currently clashes with internal pattern matching names on $effekt
def ignoring[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = () }

// Control Flow
// ============
interface Control {
  def break(): Unit
  def continue(): Unit
}

def loop { f: () => Unit / Control }: Unit = try {
  def go(): Unit = { f(); go() }
  go()
} with Control {
  def break() = ()
  def continue() = loop { f }
}

/**
 * Calls provided action repeatedly. `start` is inclusive, `end` is not.
 */
def each(start: Int, end: Int) { action: (Int) => Unit / Control } = {
  var i = start;
  loop {
    if (i < end) { val el = i; i = i + 1; action(el) }
    else { do break() }
  }
}

def repeat(n: Int) { action: () => Unit / Control } = each(0, n) { n => action() }



// Benchmarking
// ============

// runs the block and returns the time in nanoseconds
def timed { block: => Unit }: Int = {
  val before = timestamp()
  block()
  val after = timestamp()
  1000 * (after - before)
}

def measure(warmup: Int, iterations: Int) { block: => Unit }: Unit = {
  def run(n: Int, report: Bool): Unit = {
    if (n <= 0) { () } else {
      val time = timed { block() };
      if (report) { println(time) } else { () };
      run(n - 1, report)
    }
  }
  run(warmup, false)
  run(iterations, true)
}
