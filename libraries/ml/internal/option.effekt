module internal/option

import effekt
import immutable/option

extern type MLOption[T]

extern pure def isDefined[T](opt: MLOption[T]): Boolean =
  "Option.isSome ${opt}"

def isEmpty[T](opt: MLOption[T]): Boolean = not(opt.isDefined())

extern pure def force[T](opt: MLOption[T]): T =
  "Option.valOf ${opt}"

def toOption[T](opt: MLOption[T]): Option[T] = {
    if (isDefined(opt)) Some(force(opt)) else None()
}
