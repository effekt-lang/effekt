module io/args

import effekt
import internal/option
import immutable/option
import immutable/list


// ================================================
//
// Conceptual Public Functions:
//   - commandLineArgs(): List[String]
//
// ================================================


// ml Ref of ml list
extern type Args

// Works like an iterator
extern io def nativeArgs(): Args =
  "ref (CommandLine.arguments ())"

extern """
fun nextArgument a =
  case !a of
    [] => NONE |
    x :: xs => (a := xs; SOME x);
"""

// consumes the next arg if present
extern io def nativeNext(a: Args): MLOption[String] =
  "nextArgument ${a}"

def commandLineArgs(): List[String] = {
  def argsToRevList(a: Args, acc: List[String]): List[String] = toOption(nativeNext(a)) match {
    case None() => acc
    case Some(v) => argsToRevList(a, Cons(v, acc))
  }
  reverse(argsToRevList(nativeArgs(), Nil()))
}
