module mutable/array

import immutable/option

// A mutable array, backed by a sml array.
extern type Array[T]

extern pure def emptyArray[T](): Array[T] =
    "Array.fromList []"

extern pure def array[T](initialSize: Int, init: T): Array[T] =
  "Array.array (${initialSize}, ${init})"

def get[T](arr: Array[T], index: Int): Option[T] = {
    val len = size(arr);
    if (index < 0 || len <= index) None()
    else Some(unsafeGet(arr, index))
}

extern pure def size[T](arr: Array[T]): Int =
    "Array.length ${arr}"

extern pure def unsafeGet[T](arr: Array[T], index: Int): T =
    "Array.sub (${arr}, ${index})"

def put[T](arr: Array[T], index: Int, value: T): Unit =
    if (index < 0 || size(arr) <= index) ()
    else unsafeput(arr, index, value)

extern io def unsafeput[T](arr: Array[T], index: Int, value: T): Unit =
    "Array.update (${arr}, ${index}, ${value})"

def copy[T](arr: Array[T]): Array[T] =
    get(arr, 0) match {
        case None() => emptyArray()
        case Some(first) =>
            val dst = array(size(arr), first)
            copyInto(arr, dst);
            dst
    }

extern pure def copyInto[T](src: Array[T], dst: Array[T]): Unit =
    "Array.copy {src = ${src}, dst = ${dst}, di = 0}"
