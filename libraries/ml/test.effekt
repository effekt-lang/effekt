import text/string

interface Assertion {
  def assert(condition: Boolean, msg: String): Unit
}

def assertTrue(condition: Boolean, msg: String) =
  do assert(condition, msg)

def assertTrue(condition: Boolean) =
  do assert(condition, "Assertion failed")

def assertFalse(condition: Boolean, msg: String) =
  do assert(not(condition), msg)

def assertFalse(condition: Boolean) =
  do assert(not(condition), "Assertion failed")

def assertEqual[A](obtained: A, expected: A, msg: String) =
  do assert(obtained == expected, msg)

// Note: every other backend uses a generic `show` instead
def assertEqual[A](obtained: A, expected: A) { show : A => String } =
  do assert(obtained == expected, "Obtained: " ++ show(obtained) ++ "\n but expected:" ++ show(expected))

interface Test {
  def success(name: String): Unit
  def failure(name: String, msg: String): Unit
}

def test(name: String) { body: => Unit / Assertion } =
  try { body(); do success(name) } with Assertion {
    def assert(condition, msg) = if (condition) resume(()) else do failure(name, msg)
  }

def suite(name: String) { body: => Unit / Test }: Boolean = {
  println("Running suite: " ++ name);
  var failed = 0
  var passed = 0

  try { body() } with Test {
    def success(name) = {
      passed = passed + 1
      println(ANSI_GREEN ++ "+ " ++ name ++ "" ++ ANSI_RESET);
      resume(())
    }
    def failure(name, msg) = {
      failed = failed + 1
      println(ANSI_RED ++ "- (FAIL) " ++ name ++ "\n    " ++ msg ++ ANSI_RESET);
      resume(())
    }
  }
  if (failed > 0) {
    println(ANSI_RED ++ "Some tests failed (" ++ passed.show ++ " passed, " ++ failed.show ++ " failed)" ++ ANSI_RESET)
    false
  } else {
    println(ANSI_GREEN ++ "All tests passed (" ++ passed.show ++ " passed)" ++ ANSI_RESET)
    true
  }
}