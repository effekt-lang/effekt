module text/string

import effekt
import immutable/option
import internal/option

// For more information on the sml string type:
//    https://smlfamily.github.io/Basis/string.html#String:STR:SPEC

def charAt(str: String, index: Int): Option[String] =
    if (index < 0 || length(str) <= index)
        Some(unsafeCharAt(str, index))
    else None()

extern pure def length(str: String): Int =
    ml "String.length ${str}"

extern pure def startsWith(str: String, prefix: String): Bool =
    ml "String.starts_with ${str} ~prefix:${prefix}"

extern pure def endsWith(str: String, suffix: String): Bool =
    ml "String.ends_with ${str} ~suffix:${suffix}"

// extern pure def repeat(str: String, n: Int): String =
//     ml "???"

def substring(str: String, from: Int, to: Int): String = {
    def clamp(lower: Int, x: Int, upper: Int) = max(lower, min(x, upper))

    val len = str.length
    val clampedTo = clamp(0, to, len)
    val clampedFrom = clamp(0, from, to)

    val substringLength = max(0, clampedTo - clampedFrom)
    str.unsafeSubstring(clampedFrom, substringLength)
}

def substring(str: String, from: Int): String =
    str.substring(from, str.length)

extern pure def unsafeSubstring(str: String, from: Int, len: Int): String =
    ml "String.sub ${str} ${from} ${len}"

// extern pure def split(str: String, sep: String): Array[String] =
//     ml "Array.fromList (map (String.str) (String.explode str))"

// extern pure def trim(str: String): String =
//     ml "???"

// also accepts sml style `~2` for unary minus along with `+2` and `-2`
extern pure def internalStringToInt(str: String): MLOption[Int] =
    ml "int_of_string_opt ${str}"

def toInt(str: String): Option[Int] = toOption(internalStringToInt(str))

extern pure def unsafeCharAt(str: String, n: Int): String =
    ml "String.sub ${str} ${n} 1"

def indexOf(str: String, sub: String): Option[Int] = {
    def loop(str: String, sub: String, index: Int): Int = {
        if (index >= str.length) { -1 }
        else if (str.substring(index).startsWith(sub)) { index }
        else { loop(str, sub, index + 1) }
    }
    val index = loop(str, sub, 0)
    if (index == -1) { None() } else { Some(index) }
}

def lastIndexOf(str: String, sub: String): Option[Int] = {
    def loop(str: String, sub: String, index: Int): Int = {
        if (index < 0) { -1 }
        else if (str.substring(index).startsWith(sub)) { index }
        else { loop(str, sub, index - 1) }
    }
    val index = loop(str, sub, str.length)
    if (index == -1) { None() } else { Some(index) }
}

val ANSI_GREEN = "\x1b[32m"
val ANSI_RED = "\x1b[31m"
val ANSI_RESET = "\x1b[0m"