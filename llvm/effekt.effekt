module effekt

extern include "rts.ll"

extern include "primitives.ll"


// Console ops
// ===========

extern effect Console

extern pure def println(n: Int): Unit / Console =
  "call void @printInt_impl(%Int %n) ret %Unit 0"

extern pure def println(b: Boolean): Unit / Console =
  "call void @printBoolean_impl(%Boolean %b) ret %Unit 0"


// Math ops
// ========

extern pure def infixAdd(x: Int, y: Int): Int =
  "%z = add %Int %x, %y ret %Int %z"

extern pure def infixMul(x: Int, y: Int): Int =
  "%z = mul %Int %x, %y ret %Int %z"

extern pure def infixDiv(x: Int, y: Int): Int =
  "%z = sdiv %Int %x, %y ret %Int %z"

extern pure def infixSub(x: Int, y: Int): Int =
  "%z = sub %Int %x, %y ret %Int %z"

extern pure def mod(x: Int, y: Int): Int =
  "%z = srem %Int %x, %y ret %Int %z"


// Comparison ops
// ==============

extern pure def infixEq(x: Int, y: Int): Boolean =
  "%z = icmp eq %Int %x, %y ret %Boolean %z"

extern pure def infixNeq(x: Int, y: Int): Boolean =
  "%z = icmp ne %Int %x, %y ret %Boolean %z"

extern pure def infixLt(x: Int, y: Int): Boolean =
  "%z = icmp slt %Int %x, %y ret %Boolean %z"

extern pure def infixLte(x: Int, y: Int): Boolean =
  "%z = icmp sle %Int %x, %y ret %Boolean %z"

extern pure def infixGt(x: Int, y: Int): Boolean =
  "%z = icmp sgt %Int %x, %y ret %Boolean %z"

extern pure def infixGte(x: Int, y: Int): Boolean =
  "%z = icmp sge %Int %x, %y ret %Boolean %z"


// Boolean ops
// ===========

extern pure def infixEq(x: Boolean, y: Boolean): Boolean =
  "%z = icmp eq %Boolean %x, %y ret %Boolean %z"

extern pure def infixNeq(x: Boolean, y: Boolean): Boolean =
  "%z = icmp ne %Boolean %x, %y ret %Boolean %z"

extern pure def not(b: Boolean): Boolean =
  "%z = icmp eq %Boolean 0, %b ret %Boolean %z"

extern pure def infixOr(x: Boolean, y: Boolean): Boolean =
  "%z = or %Boolean %x, %y ret %Boolean %z"

extern pure def infixAnd(x: Boolean, y: Boolean): Boolean =
  "%z = and %Boolean %x, %y ret %Boolean %z"
