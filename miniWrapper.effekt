extern jsNode """
  const duckDB = require('@duckdb/node-api').DuckDBInstance;

  function createDB(callback) {
    duckDB.create(':memory:', function() {
      $effekt.runToplevel(callback)
    })
  }

  function createConnection(db, callback) {
    db.connect(function() {
      $effekt.runToplevel(callback)
    });
  }

  function runQuery(con, query, callback) {
    con.run(query, function() {
      $effekt.runToplevel(callback)
    });
  }

  function getChunk(res, callback){
    res.fetchChunk(function() {
      $effekt.runToplevel(callback)
    });
  }

  function getOne(res, callback) {
    getChunk(res, chunk => {
      // Last chunk will have zero rows.
      if (chunk.rowCount === 0) {
          return;
      }
      callback(chunk.getColumns());
    });
  }

  function runAndGet(con, query, callback) {
    runQuery(con, query, res => getOne(res, callback));
  }
"""

extern llvm """
  declare void @c_test_duckDB(%Stack)
  declare void @c_get_Instance(%Stack)
  declare void @c_get_Connection(%Stack, %Pos)
  declare void @c_run_Query(%Stack, %Pos, %Pos)
"""

extern type Database

extern type Connection

extern type JSValue

extern async def testC(): Int =
  llvm """
      call ccc void @c_test_duckDB(%Stack %stack)
      ret void
  """

extern async def createDB(): Database =
  jsNode "$effekt.capture(callback => createDB(callback));"
  llvm """
      call ccc void @c_get_Instance(%Stack %stack)
      ret void
  """

extern async def createConnection(db: Database): Connection =
  jsNode "$effekt.capture(callback => createConnection(${db}, callback));"
  llvm """
      call ccc void @c_get_Connection(%Stack %stack, %Pos ${db})
      ret void
  """

extern def createTableFromFile(con: Connection, path: String, tableName: String): JSValue =
  jsNode "runQuery(${con}, 'CREATE TABLE ' + ${tableName} + ' AS SELECT * FROM ' + ${path}, x => x);"

extern async def runQuery(con: Connection, query: String): String =
  llvm """
      call ccc void @c_run_Query(%Stack %stack, %Pos ${con}, %Pos ${query})
      ret void
  """

extern async def runAndGet(con: Connection, query: String): String =
  jsNode "$effekt.capture(callback => runAndGet(${con}, ${query}, callback));"

def main() = {
  val db = createDB()
  val con = createConnection(db)
  con.runQuery("CREATE TABLE test AS SELECT * FROM read_json('sample_database.json');")
  con.runQuery("CREATE TABLE integers(i INTEGER, j INTEGER);")
  con.runQuery("INSERT INTO integers VALUES (3, 4), (5, 6), (7, NULL);")
  println(con.runQuery("SELECT * from test"))

  // inspect(runAndGet(con, "SELECT id FROM test"))
  // val n = testC()
  // println(n)
  println("made it here")
}
